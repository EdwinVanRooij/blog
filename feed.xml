<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ash Furrow</title>
  <id>https://ashfurrow.com/blog</id>
  <link href="https://ashfurrow.com/"/>
  <link href="https://ashfurrow.com/feed.xml" rel="self"/>
  <updated>2018-07-19T14:15:03+00:00</updated>
  <author>
    <name>Ash Furrow</name>
  </author>
  <entry>
    <title>Thinking Critically About Apple</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/thinking-critically-about-apple/"/>
    <id>https://ashfurrow.com/blog/thinking-critically-about-apple/</id>
    <published>2018-07-19T14:15:03+00:00</published>
    <updated>2018-07-19T14:15:03+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday I tweeted a complaint I had about Apple&amp;rsquo;s iOS SDK. My complaint highlighted one instance of a larger trend in Apple&amp;rsquo;s behaviour towards their SDK design and documentation; I&amp;rsquo;m far more interested in the trend than I am in any given SDK issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Apple&amp;rsquo;s stubborn refusal to provide a simple API to determine if you&amp;rsquo;re on an iPhone X causes developers to check for hardcoded screen dimensions, which is worse than developers making device-specific layouts. Don&amp;rsquo;t @ me.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1019631126585978881?ref_src=twsrc%5Etfw"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Despite my request to not be replied to, people did. They really seemed to want to discuss the specifics of this issue. But, to repeat myself: I don&amp;rsquo;t care about this specific complaint, I care about the larger trend.&lt;/p&gt;

&lt;p&gt;So what is that trend? Well it&amp;rsquo;s complicated and it involves critical thinking; if you&amp;rsquo;ve never thought critically about Apple before, this might seem like a really weird thing to complain about, but here&amp;rsquo;s my issue:&lt;/p&gt;

&lt;p&gt;Apple designs its SDK based on how Apple wants the community to build software. However, sometimes the way Apple wants you to build things and the way you want to build things is going to differ.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I really wish &amp;ldquo;you should think critically about Apple&amp;rdquo; weren&amp;rsquo;t such a hot take in the iOS developer community, but here we are.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1004406015956221953?ref_src=twsrc%5Etfw"&gt;June 6, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;This attitude Apple has (&amp;ldquo;you can either build how they want you to build, or get out&amp;rdquo;) obviously has advantages and disadvantages. I&amp;rsquo;m not saying it&amp;rsquo;s absolutely bad, I&amp;rsquo;m saying that &lt;em&gt;I&lt;/em&gt; am often frustrated by it. My complaints on twitter are not meant to deride Apple, but rather to draw the community&amp;rsquo;s attention to how Apple&amp;rsquo;s motivations and their own motivations are not the same. (This fact seems obvious to me but I often get pushback from community developers, which boggles my mind.)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Thinking critically about Apple would involve asking questions about their decisions. Let’s take how they deprecated OpenGL for example. Who does this benefit? Who does it harm? What are the implications? Those sorts of questions need to get asked.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1004708649896435712?ref_src=twsrc%5Etfw"&gt;June 7, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Sometimes, when trying to define a problem with how you work, it&amp;rsquo;s helpful to step outside your experience and get a different perspective. Let&amp;rsquo;s contrast how Apple treats its SDK design with another platform: React.&lt;/p&gt;

&lt;p&gt;Whereas Apple&amp;rsquo;s philosophy could be characterized as &amp;ldquo;this is how to build software for our platform, take it or leave it&amp;rdquo;, React could described with &amp;ldquo;this is how to build software for our platform, but sometimes you might need to escape our abstractions, and here&amp;rsquo;s how to do that.&amp;rdquo; You might think I&amp;rsquo;m being hyperbolic, but let&amp;rsquo;s look at the docs for &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;imperatively accessing DOM elements outside of React&amp;rsquo;s lifecycle&lt;/a&gt;. The technical details don&amp;rsquo;t matter here – just pay attention to their tone:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your first inclination may be to use refs to “make things happen” in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In rare cases, you might want to have access to a child’s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s a huge shift from Apple&amp;rsquo;s approach to, for example, the iPhone X API that I tweeted about yesterday. React&amp;rsquo;s docs caution you against overusing this escape hatch from their SDK, but they also explain in detail how to do it.&lt;/p&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just me, but this difference is really striking. It exemplifies the distinction that I&amp;rsquo;m trying to highlight.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not saying Apple needs to change or that you need to change your mind or anything. Not everything I say is meant to be persuasive. All I&amp;rsquo;m saying is: Apple is it&amp;rsquo;s own company with its own motivations. Do not forget that, and do not conflate what&amp;rsquo;s good for you with what&amp;rsquo;s good for Apple.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Airbnb and React Native Expectations</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/airbnb-and-react-native-expectations/"/>
    <id>https://ashfurrow.com/blog/airbnb-and-react-native-expectations/</id>
    <published>2018-06-23T16:42:18+00:00</published>
    <updated>2018-06-23T16:42:18+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;By now, most iOS developers have probably heard the news that &lt;a href="https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c"&gt;Airbnb is moving away from React Native&lt;/a&gt;. It&amp;rsquo;s kind of weird to see the reaction online – people are acting jubilant, almost &lt;em&gt;celebrating&lt;/em&gt; the announcement. I see some iOS developers on twitter practically &lt;em&gt;rolling their eyes&lt;/em&gt; at Airbnb for even &lt;em&gt;trying&lt;/em&gt; React Native. But I&amp;rsquo;m not here to talk about insularity of the iOS developer community, I&amp;rsquo;m here to talk about Airbnb&amp;rsquo;s (quite excellent) blog posts.&lt;/p&gt;

&lt;p&gt;These blog posts are excellent because Airbnb first lays out its expectations for React Native, and then explains how well the technology met (or failed to meet) those expectations. It&amp;rsquo;s a thorough, honest discussion about how large teams evaluate technologies, as well as how those team live with the consequences of their decisions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So I really like these posts, but I wouldn&amp;rsquo;t say that they&amp;rsquo;re &lt;em&gt;complete&lt;/em&gt;. More on that later. First, I want to discuss Airbnb&amp;rsquo;s actual expectations. I&amp;rsquo;m going to summarize them here, but you really, really should &lt;a href="https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c"&gt;read the posts yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are Airbnb&amp;rsquo;s goals for React Native, which I&amp;rsquo;m interpreting as their expectations for the technology:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allow us to &lt;strong&gt;move faster&lt;/strong&gt; as an organization.&lt;/li&gt;
&lt;li&gt;Maintain the &lt;strong&gt;quality bar&lt;/strong&gt; set by native.&lt;/li&gt;
&lt;li&gt;Write product code &lt;strong&gt;once&lt;/strong&gt; for mobile instead of &lt;strong&gt;twice&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Improve upon the &lt;strong&gt;developer experience&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, so how did those four things go? Well, I&amp;rsquo;ll summarize again:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Engineers were able to move at an unparalleled speed&amp;rdquo;&lt;/em&gt;, but also there were also technical and cultural hurdles that mitigated this success.&lt;/li&gt;
&lt;li&gt;Again, a qualified success: &lt;em&gt;&amp;ldquo;we were able to accomplish a number of things that we weren’t sure were possible.&amp;rdquo;&lt;/em&gt; But they point to the same technical challenges and a lack of internal engineering resources that frustrated their team sometimes.&lt;/li&gt;
&lt;li&gt;This was a failure(&lt;strong&gt;*&lt;/strong&gt;): &lt;em&gt;&amp;ldquo;we wound up supporting code on three platforms instead of two&amp;rdquo;&lt;/em&gt;, which sounds grim. But also, &lt;em&gt;&amp;ldquo;only a small percentage of our app was React Native&amp;rdquo;&lt;/em&gt;, meaning they had a lot of overhead for not a lot benefit. I want to discuss this expectation in more detail, but more on that in a minute.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;&amp;ldquo;mixed bag&amp;rdquo;&lt;/em&gt;, which some things being way easier and faster, while other things were worse.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;(&lt;strong&gt;*Note&lt;/strong&gt;: my characterization of #3 as a failure has been disputed; you should go read &lt;a href="https://twitter.com/intelligibabble/status/1010948686501691393"&gt;Leland Richardson&amp;rsquo;s thread&lt;/a&gt; responding to me to get a really great, nuanced clarification of Airbnb&amp;rsquo;s experience sharing code between Android and iOS.)&lt;/p&gt;

&lt;p&gt;Okay so at first glance, this seems kind of promising, right? I mean, Airbnb says that &amp;ldquo;60% [of engineers] would describe their experience as amazing&amp;rdquo;, so a &lt;em&gt;majority&lt;/em&gt; of your team is on board. But 5% were &amp;ldquo;strongly negative&amp;rdquo;? Interesting. Very interesting. We&amp;rsquo;ll get back to this shortly, first let&amp;rsquo;s talk about that third expectation.&lt;/p&gt;

&lt;p&gt;The big point everyone is talking about is number three: Airbnb expected to be able to reuse code across Android and iOS but were let down. They wanted that &amp;ldquo;write once, run everywhere&amp;rdquo; experience. And that&amp;rsquo;s the problem that I have with these posts and how they&amp;rsquo;re being discussed.&lt;/p&gt;

&lt;p&gt;React Native is &lt;a href="https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/"&gt;explicitly &lt;strong&gt;not&lt;/strong&gt; &amp;ldquo;write once, run everywhere&amp;rdquo;&lt;/a&gt;, although this is a common misconception. The idea that you can write one app and deploy to Android and iOS is attractive, and solutions like &lt;a href="https://expo.io"&gt;Expo&lt;/a&gt; do exist to do that, but cross-platform code reuse is &lt;em&gt;not&lt;/em&gt; the central selling point of React Native. React Native is a &amp;ldquo;learn once, write everywhere&amp;rdquo; platform; instead of building one app for multiple platforms, the main selling point of React Native is that &lt;a href="https://ashfurrow.com/blog/the-case-for-react-native/"&gt;it lets you use React&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;So when people frame Airbnb&amp;rsquo;s decision as a &lt;em&gt;failure&lt;/em&gt; of React Native, I wonder about how much they really understand about what React Native is &lt;em&gt;for&lt;/em&gt;. If you have an expectation that a technology can do something that it&amp;rsquo;s not designed for, and then you&amp;rsquo;re disappointed when it fails to deliver, it&amp;rsquo;s not really the technology&amp;rsquo;s fault, is it? And further, if &amp;ldquo;only a small percentage&amp;rdquo; of your app even &lt;em&gt;uses&lt;/em&gt; that technology, then you don&amp;rsquo;t get as much of the benefits.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m trying not to frame this as an Artsy-vs-Airbnb discussion, but it&amp;rsquo;s hard to avoid the comparison because Artsy has had &lt;a href="http://artsy.github.io/series/react-native-at-artsy/"&gt;such overwhelming success&lt;/a&gt; with our React Native stack. I think a big part of that comes from how we structured our React Native code: all the JavaScript is in &lt;a href="https://github.com/artsy/emission"&gt;its own repository&lt;/a&gt; and it &lt;a href="http://artsy.github.io/blog/2018/04/17/making-a-components-pod/"&gt;gets shipped as a CocoaPod&lt;/a&gt;. The &lt;a href="https://github.com/artsy/eigen"&gt;native app&lt;/a&gt; just imports that pod and instantiates view controllers from it as if they were normal view controllers (because they &lt;em&gt;are&lt;/em&gt;, their views just happen to be React Native components). Our native codebase was using React Native for a year before I even wrote &lt;em&gt;any&lt;/em&gt; JavaScript, which minimized the overhead for me, a person who was pretty unhappy that JavaScript was in Artsy&amp;rsquo;s app at all.&lt;/p&gt;

&lt;p&gt;And that kind of leads me back to culture. I think these blog posts do an excellent job of describing the &lt;em&gt;technical&lt;/em&gt; parts of their experience, but they lack a detailed description of non-technical barriers to adopting React Native.&lt;/p&gt;

&lt;p&gt;What kind of barriers? Well, not to bring up the insularity of the iOS developer community again, but&amp;hellip; iOS developers kind of have a reputation within the broader software industry. Charlie Cheever, &lt;a href="https://blog.expo.io/should-we-use-react-native-1465d8b607ac"&gt;writing about this topic&lt;/a&gt; from Expo&amp;rsquo;s perspective, has this to say:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] organizations where there are people who identify themselves strongly as iOS programmers and Android programmers have a really hard time being happy with React Native. &lt;strong&gt;iOS programmers in particular are very unhappy&lt;/strong&gt; with it and generally &lt;strong&gt;regard JS as an infestation&lt;/strong&gt; of the company’s codebase, while Android programmers have more mixed feelings.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;(Emphasis added.)&lt;/p&gt;

&lt;p&gt;When I see a majority of a team describe their experience as &amp;ldquo;amazing&amp;rdquo;, and a very small (but very vocal, I&amp;rsquo;m sure) minority of the team describe it as &amp;ldquo;strongly negative&amp;rdquo;, it really makes me wonder about the internal discussions about React Native at Airbnb.&lt;/p&gt;

&lt;p&gt;And I get it, I really do. &lt;em&gt;I&lt;/em&gt; thought JavaScript was an infestation, too. It &lt;a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/"&gt;took a long time for me to get over it&lt;/a&gt;. I mean, if you&amp;rsquo;ve been hired to write Swift/Objective-C and all of a sudden your team asks you to use JavaScript instead, it&amp;rsquo;s natural to feel frustrated, or even angry. But you know what else? Engineers don&amp;rsquo;t just write code, they &lt;em&gt;solve problems&lt;/em&gt;. Of course engineers are going to have feelings about the tools their team use, and I think a future blog post should cover how Artsy worked to mitigate the cultural tensions between native iOS developers and our React Native choice. But I wish we&amp;rsquo;d keep our feelings in check a little bit more.&lt;/p&gt;

&lt;p&gt;Airbnb&amp;rsquo;s experience has been compared, &lt;a href="https://twitter.com/spikebrehm/status/1010279535319879680"&gt;appropriately&lt;/a&gt;, to a rejected organ transplant. If your company&amp;rsquo;s culture is really, really into iOS native development, then the organ will be rejected.&lt;/p&gt;

&lt;p&gt;The reasons that Airbnb chose to move away from React Native are cultural as much as they are technical, and while I understand why they didn&amp;rsquo;t publicize these tensions, it gives the impression that Airbnb&amp;rsquo;s decision was based entirely in technical merit. And that&amp;rsquo;s just not the case.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Case for React Native</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/the-case-for-react-native/"/>
    <id>https://ashfurrow.com/blog/the-case-for-react-native/</id>
    <published>2018-06-15T18:18:35+00:00</published>
    <updated>2018-06-15T18:18:35+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;It occurred to me that there is a missing piece to the conversations around React Native - the React abstraction itself! Rather than getting stuck in debates about &lt;a href="https://ashfurrow.com/blog/javascript-is-good-actually/"&gt;the quality of JavaScript&lt;/a&gt;, I&amp;rsquo;d like to talk about this aspect of the React Native choice. If you&amp;rsquo;re open-minded, if you accept that the JavaScript language is as excellent as I say it is, and if you&amp;rsquo;re curious about why some people just seem so excited to use JavaScript to write iOS apps, I would love to explain my perspective.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="react-itself-is-amazing"&gt;React Itself is Amazing&lt;/h2&gt;

&lt;p&gt;Okay so in order to understand React, it helps to understand the history of why React was built. Programming user interfaces for the web browser has sucked, since forever, and over the decades different teams have tried different approaches to make it suck less. This sounds kind of crappy, and for a while it really was, but then something really curious happened: the pressure to find a better way to build web software kept building and building until it outweighed the difficulty of the constraints of web browsers. The overwhelming amount of pressure to mitigate the awfulness of web programming led to a lot of really innovative ideas. One of the most famous ones is &lt;a href="https://jquery.com"&gt;jQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;jQuery made it really easy to interact with the HTML elements on the web page (called the DOM). Many cool frontend JavaScript frameworks are built atop jQuery. The only problem was that the DOM API itself – the API that jQuery sits atop – is really slow.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Really slow&amp;rdquo; is a relative term, so let&amp;rsquo;s unpack what that means. Certain changes to the DOM can trigger what&amp;rsquo;s called a &lt;a href="https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Notes_on_HTML_Reflow"&gt;reflow&lt;/a&gt; – basically, the layout of the website gets re-calculated by the browser. A reflow is a &lt;strong&gt;synchronous&lt;/strong&gt; event that can be easily triggered inadvertently by programmers, and it&amp;rsquo;s easy for web apps to have performance problems based on this bottleneck (you can &lt;a href="http://kellegous.com/j/2013/01/26/layout-performance/"&gt;read more about layout thrashing here&lt;/a&gt;). Browser makers go to great lengths to optimize their reflow algorithms, but the easiest win for web app performance is being smart about when to trigger a reflow. &lt;/p&gt;

&lt;p&gt;A kind of arms race between frameworks for web performance has been going for years, and it&amp;rsquo;s been really exciting!  And that brings us to React. React solves the slow DOM API problem by abstracting away the &lt;em&gt;state&lt;/em&gt; of the application. There are lots of implementation details (like, people usually mention the &lt;a href="https://reactjs.org/docs/faq-internals.html"&gt;Virtual DOM&lt;/a&gt; when explaining React) but the most important thing is that React is &lt;em&gt;declarative&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what the heck is that? Well it takes a second to explain.&lt;/p&gt;

&lt;p&gt;User interfaces are built in React by building and composing reusable &lt;em&gt;components&lt;/em&gt;, which are little pieces of code that turn input properties (called props) into a user interface. A React app is really just a big tree of components; each parent passes its child components the props that the child needs to render itself, and so on. This is &lt;em&gt;declarative&lt;/em&gt; because if a component is passed the same props, it will produce the same user interface every time.&lt;/p&gt;

&lt;p&gt;Because of the stateless nature of the components, aggressive optimizations can be made to minimize DOM updates. And holy smokes is it ever optimized. Plus, there are some amazing tools that can be built on top of a framework that abstracts state into a plain JavaScript object that be tracked over time.&lt;/p&gt;

&lt;p&gt;(Components can maintain their own internal state independent of React, but it&amp;rsquo;s totally private to that component and can only be modified through a centralized, asynchronous API.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always liked (&lt;a href="https://ashfurrow.com/blog/reactivecocoa-vs-rxswift/"&gt;and advocated for&lt;/a&gt;) iOS functional reactive frameworks like &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt;, &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt;, &lt;a href="https://github.com/JensRavens/Interstellar"&gt;Interstellar&lt;/a&gt;, etc on iOS. However, I&amp;rsquo;ve never felt &lt;em&gt;entirely&lt;/em&gt; satisfied by them. They are an excellent way to handle state, but they themselves operate within and are built atop a stateful abstraction layer (UIKit). Subsequently, the complexity of these frameworks is fundamentally constrained on the lower bounds in a way that React isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s just too much incidental complexity to how these frameworks need to integrate with the rest of the app. Contrast that complexity with React, where there are no observables or flat maps or signal transforms; you just write components in declarative way and you get all the benefits of reactive UIs for free.  &lt;/p&gt;

&lt;p&gt;Yeah, for free.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s like a functional reactive programmer&amp;rsquo;s dream. Unidirectional data flow, asynchronous everything, everything, it&amp;rsquo;s so good. The declarative abstraction that React provides is elegant and thoughtful, and the React developers have continuously improved the API and tooling for React over the past five years.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re keen to learn more, you should check out the &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;React tutorial&lt;/a&gt;; it includes a great, in-depth explanation of why immutability and declarative APIs are so important. You can also read &lt;a href="https://medium.freecodecamp.org/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76"&gt;more about why React is so popular here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My point is: React is unbelievably good. But it&amp;rsquo;s not the only reason to use React Native.&lt;/p&gt;

&lt;h2 id="the-javascript-ecosystem-is-also-amazing"&gt;The JavaScript Ecosystem is Also Amazing&lt;/h2&gt;

&lt;p&gt;iOS developers are a smaller community than web developers, who tend to specialize more. The web has also been around longer, too, and it&amp;rsquo;s lacked any authority to direct its development. How cool is that! A whole other community of developers, evolving under totally different constraints.&lt;/p&gt;

&lt;p&gt;JavaScript tools are often written &lt;em&gt;in&lt;/em&gt; JavaScript themselves, so what you get is a really low barrier to entry for people to build new tools, experiment with ideas, and of course, to make the everyday incremental improvements necessary for an ecosystem to thrive. Just like with iOS, the quality of any given OSS framework or tool is going to vary, but the sheer size of the web developer community and a more open perspective on tool building has produced a &lt;em&gt;lot&lt;/em&gt; of great tools.&lt;/p&gt;

&lt;p&gt;And if you build your iOS app in React Native, you get access to that ecosystem. That means &lt;a href="https://facebook.github.io/relay/"&gt;Relay&lt;/a&gt;/&lt;a href="https://www.apollographql.com"&gt;Apollo&lt;/a&gt;, &lt;a href="https://www.styled-components.com"&gt;styled components&lt;/a&gt;, &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt;, &lt;a href="https://github.com/airbnb/enzyme"&gt;Enzyme&lt;/a&gt;, &lt;a href="https://prettier.io"&gt;prettier&lt;/a&gt;, &lt;a href="https://github.com/typicode/husky"&gt;Husky&lt;/a&gt;, many other great tools, and a long tail of less well-known but nonetheless very useful tools. I cannot do justice to this feeling, you just need to experience it to understand.&lt;/p&gt;

&lt;p&gt;People will validly complain about JavaScript developers relying on too many dependencies. When the native iOS developers at Artsy discuss the downsides of using React Native, we will tell you first thing about the dependencies. You kind of just&amp;hellip; adjust to it.&lt;/p&gt;

&lt;p&gt;There are big culture differences in OSS between the iOS and JavaScript developer communities. I think that JavaScript developers go a little too far, but I also think that iOS developers don&amp;rsquo;t go far enough. At Artsy, we see those differences on our engineering team. Sometimes, tensions surface between web and native developers contributing to the shared React Native codebase. It&amp;rsquo;s so fascinating to see how we approach the same problems from different perspectives. Each one of these tensions is an opportunity for us to learn from each other.&lt;/p&gt;

&lt;p&gt;So yes, you&amp;rsquo;ll have a lot of dependencies. But you&amp;rsquo;ll also learn to see building software from a new perspective.  That learning experience alone, to me, is a worth a few hundred node modules.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The thing is: this is all just what I think. Different people with different backgrounds and different priorities are going to come to different conclusions. I think that&amp;rsquo;s totally okay. There are lots of reasons not to use React Native; when my colleague Eloy &lt;a href="http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/"&gt;describes why Artsy adopted it&lt;/a&gt;, he literally begins with a bunch of React Native downsides. We&amp;rsquo;re not hiding anything!&lt;/p&gt;

&lt;p&gt;A lot of iOS apps (many? most?) can be entirely described as &amp;ldquo;software that turns API calls into user interfaces, and user interactions into API calls.&amp;rdquo; That&amp;rsquo;s a problem that React is tailored to solve, and React Native adopts that solution to iOS and Android really really well.&lt;/p&gt;

&lt;p&gt;React Native isn&amp;rsquo;t perfect, and it&amp;rsquo;s not suitable for every app. But nothing is! UIKit isn&amp;rsquo;t perfect for every app, either. There simply are no silver bullets in programming. React solves the problem of programming UIs to such a degree of success that, when combined with a fantastic language and a vibrant ecosystem, it makes a compelling case for use in a lot of apps.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Year of Mastodon User Activity</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/a-year-of-mastodon-user-activity/"/>
    <id>https://ashfurrow.com/blog/a-year-of-mastodon-user-activity/</id>
    <published>2018-06-09T14:50:30+00:00</published>
    <updated>2018-06-09T14:50:30+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Oh hey, remember &lt;a href="https://joinmastodon.org"&gt;Mastodon&lt;/a&gt;? Remember how I &lt;a href="https://ashfurrow.com/blog/mastodon/"&gt;started my own Mastodon instance&lt;/a&gt;? How&amp;rsquo;s that been going, anyway? Well it&amp;rsquo;s been (over) a year so let&amp;rsquo;s check in, shall we?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Things have been going well on my instance, &lt;a href="https://mastodon.technology"&gt;mastodon.technology&lt;/a&gt;. I&amp;rsquo;ve learned a tonne, I&amp;rsquo;ve contributed here and there, and I&amp;rsquo;ve gotten to know some of the other instance admins (they rock!). I&amp;rsquo;m more of a lurker on Mastodon than on Twitter, but it&amp;rsquo;s been nice.&lt;/p&gt;

&lt;p&gt;Okay on to the good stuff. Mastodon added the feature of keeping track of user counts over time, but I&amp;rsquo;ve been logging in to the Rails console since I started to check how many users have logged in within one- and two-week timeframes. Not a perfect metric, but it&amp;rsquo;s interesting nonetheless. The account metrics are based on &lt;a href="https://github.com/plataformatec/devise"&gt;devise&lt;/a&gt; and I collected stats with the following two commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'last_sign_in_at &amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'last_sign_in_at &amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;weeks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the data is &lt;a href="https://gist.github.com/ashfurrow/1954350316c180affa879ac3e74caba9"&gt;available in plaintext&lt;/a&gt;, but here&amp;rsquo;s a pretty graph:&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/a-year-of-mastodon-user-activity/graph.png" alt="Graph of Mastodon login counts over a year" /&gt;&lt;/p&gt;



&lt;p&gt;So that&amp;rsquo;s cool! Let&amp;rsquo;s contextualize things a bit. The spike in April came in light of the Cambridge Analytica and Facebook controversy. People were angry about Facebook and surveillance capitalism, and they took to Mastodon for an alternative social network. Cool! I was curious to see if that surge of popularity would last, and it &lt;em&gt;seems&lt;/em&gt; to have, so far anyway.&lt;/p&gt;

&lt;p&gt;The Fediverse was also recently hit by a wave of spam accounts, which &lt;em&gt;could&lt;/em&gt; be inflating login counts slightly, but it&amp;rsquo;s hard to say.&lt;/p&gt;

&lt;p&gt;All in all, I&amp;rsquo;m pretty happy with things. Aside from the &lt;a href="https://github.com/tootsuite/mastodon/issues/6734"&gt;occasional problem&lt;/a&gt; or &lt;a href="https://gist.github.com/ashfurrow/abd1418399883b2bdfdd9a1f6120f139"&gt;misconfigured database backups&lt;/a&gt;, running a Mastodon instance hasn&amp;rsquo;t been particularly onerous. This is good, since I have a life and a job and running mastodon.technology can&amp;rsquo;t be like a full-time commitment for me. Having the hosting costs &lt;a href="https://www.patreon.com/ashfurrow"&gt;covered by donations&lt;/a&gt; also helps &lt;em&gt;a lot&lt;/em&gt;, since it removes the financial burden from me. Of course, there are occasional moderation duties, but for the most part users on my instance have adhered to the &lt;a href="https://mastodon.technology/about/more"&gt;Code of Conduct&lt;/a&gt;. A healthy admin support network helps, too.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not all roses. Some instances have been lost in the past year, some intentionally, some accidentally. But we&amp;rsquo;re all figuring this out together and I&amp;rsquo;ve learned a lot running this service over the past year. Hopefully I can follow this post up in 2019 with updated stats.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Abstraction Ad Nauseam</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/abstraction-ad-nauseam/"/>
    <id>https://ashfurrow.com/blog/abstraction-ad-nauseam/</id>
    <published>2018-05-22T01:31:50+00:00</published>
    <updated>2018-05-22T01:31:50+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Okay so tell me if you&amp;rsquo;ve heard &lt;em&gt;this&lt;/em&gt; before:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t use X abstraction, you need to understand/use/think in terms of Y technology that X sits on top of.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Okay so that&amp;rsquo;s pretty vague, right? So let&amp;rsquo;s see some examples that help illustrate how widely used this kind of thinking is.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;You shouldn&amp;rsquo;t use open source libraries because you really should know how every line of code in your app works.&lt;/p&gt;

&lt;p&gt;No one should learn ActiveRecord before learning SQL and understanding relational algebra.&lt;/p&gt;

&lt;p&gt;Manual memory management is the only way to get really memory-efficient code. Garbage collectors and static automation just makes coders lazy.&lt;/p&gt;

&lt;p&gt;Babel is fine and everything, but if you don&amp;rsquo;t understand the actual JavaScript that gets run in the browser, then you&amp;rsquo;re not really a web developer.&lt;/p&gt;

&lt;p&gt;React Native is fine and everything, but if you want to write great apps, then you need to write them in native code.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;(And let&amp;rsquo;s keep in mind that I&amp;rsquo;m not trying to dismiss these individual concerns, which are valid perspectives that people do hold. I mean, I kind of agree with them a little bit – or at least I see where they&amp;rsquo;re coming from.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not dismissing these ideas; I&amp;rsquo;m trying to say that &lt;em&gt;in aggregate&lt;/em&gt;, there&amp;rsquo;s a kind of pattern and &lt;em&gt;that&amp;rsquo;s&lt;/em&gt; what I&amp;rsquo;m  talking about. There&amp;rsquo;s a perspective that&amp;rsquo;s shared among these attitudes, and that perspective is: &amp;ldquo;&lt;strong&gt;other people should work at the level of abstraction that &lt;em&gt;I&lt;/em&gt; want to work in&lt;/strong&gt;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Okay, take a deep breath in. And out. Nice, let&amp;rsquo;s talking about Math.&lt;/p&gt;

&lt;h2 id="theres-always-someone-lower-stack-than-you"&gt;There&amp;rsquo;s Always Someone Lower-Stack Than You&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s why this line of thinking makes no logical sense even though we all have these kinds of thoughts. Let&amp;rsquo;s look at an example: sure someone might enjoy working at abstraction level Y and think others ought to work there to, but there&amp;rsquo;s someone thinking &amp;ldquo;hey, Y is actually built on top of Z.&amp;rdquo; And then there are probably discussions about whether Y is even an appropriate abstraction or if Z is better. My god, it just never ends!&lt;/p&gt;

&lt;p&gt;Or does it?&lt;/p&gt;

&lt;p&gt;It does actually end! It ends with &lt;a href="https://en.wikipedia.org/wiki/Zermelo–Fraenkel_set_theory"&gt;ZF Set Theory&lt;/a&gt;, the axioms of Mathematics from which every field in technology ultimately derive. These are &lt;em&gt;very&lt;/em&gt; abstract concepts, even though all higher levels of abstraction derive from them. Neat.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing under ZF Set Theory except for&amp;hellip; philosophy I guess? I mean, these are &lt;em&gt;the&lt;/em&gt; most foundational building blocks of something as foundational as &lt;em&gt;Math&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see a very broad-strokes example, skipping over many many intermediate levels of abstraction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code in compiled languages are built on top of assembly code.&lt;/li&gt;
&lt;li&gt;Assembly is built on top of zeroes and ones encoded in logic gates.&lt;/li&gt;
&lt;li&gt;Gates are etched into silicon using engineering and physics.&lt;/li&gt;
&lt;li&gt;Physics is built on top of Algebra.&lt;/li&gt;
&lt;li&gt;Algebra is built on top of ZF Set Theory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can do this with basically everything: start with a field of technology, pick one of its foundations, repeat, and you&amp;rsquo;ll eventually end up at the same place. So cool! &lt;/p&gt;

&lt;p&gt;Wait&amp;hellip; I guess &lt;em&gt;technically&lt;/em&gt; there&amp;rsquo;s not &amp;ldquo;always&amp;rdquo; someone lower-stack than you if your field is philosophy. Damn, the Arts majors were right all along! It&amp;rsquo;s the contemplation of the &lt;em&gt;self&lt;/em&gt;, not the contemplation of &lt;code&gt;self&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Okay so we&amp;rsquo;ve established that there&amp;rsquo;s (almost) always someone lower-level than you, and their perspectives &lt;em&gt;also&lt;/em&gt; make sense, we can kind of zoom in and see how this is true in both broad strokes and true in specific instances. It&amp;rsquo;s the idea that people &lt;em&gt;should&lt;/em&gt; work in &lt;em&gt;your&lt;/em&gt; preferred level of abstraction, wherever that preference falls along a spectrum of levels of abstraction. Whatever level you prefer, there&amp;rsquo;s something lower-stack, and inductively, each perspective along this spectrum is arguable and makes sense to &lt;em&gt;someone&lt;/em&gt;. So you have to admit that the chances that &lt;em&gt;any given perspective&lt;/em&gt; along this entire spectrum is somehow preferential to the rest is highly unlikely, right? Right???&lt;/p&gt;

&lt;p&gt;So what, is this another one of my grand-equivocating &amp;ldquo;we&amp;rsquo;re all the same so we should respect and learn from each other blah blah blah&amp;rdquo; blog posts? Well, yeah, it is, but it&amp;rsquo;s more specific than that this time.&lt;/p&gt;

&lt;p&gt;Why does anything that I just said matter? It&amp;rsquo;s because&amp;hellip;&lt;/p&gt;

&lt;h2 id="abstractions-are-really-useful"&gt;Abstractions Are Really Useful&lt;/h2&gt;

&lt;p&gt;Okay so we&amp;rsquo;ve got abstractions which, as concepts, are derived from other, lower abstractions. An abstraction is really a perspective, a way to think about something. Abstractions are really useful because they help us think about things; different kinds of problems lend themselves to being solved using certain perspectives. It would be silly to think about the quantum physics of the electrons being pushed through your CPU if the problem you&amp;rsquo;re trying to solve is &amp;ldquo;I need a website for my band.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Abstractions are really useful, and when we build software, we actually switch between abstractions a lot. Sometimes it&amp;rsquo;s helpful to think about view controllers, sometimes it&amp;rsquo;s helpful to think in terms of specific lines of code within them.&lt;/p&gt;

&lt;p&gt;I guess what this attitude I&amp;rsquo;m describing comes down to is a disagreement about which abstraction levels are &amp;ldquo;better&amp;rdquo;, which is a question that&amp;rsquo;s also reducible to Philosophy. Damn you again, Arts students!&lt;/p&gt;

&lt;p&gt;So abstractions are useful, and we all jump between levels of abstraction all the time, and maybe we &lt;em&gt;should&lt;/em&gt; be curious about what our abstractions are built on, and &lt;em&gt;yeah okay I guess&lt;/em&gt; we should accept that some people are going to want to work at higher levels of abstraction.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s not just when we&amp;rsquo;re working; it&amp;rsquo;s when we&amp;rsquo;re &lt;em&gt;learning&lt;/em&gt;, too. Take for example the argument that Rails developers should learn SQL before using ActiveRecord. Learning useful applications of a tool is usually easier than learning its building blocks, and &amp;ldquo;usefulness&amp;rdquo; is strong motivation to keep learning. You can always come back later and learn more. Often, programming leads back to subjects we originally skimmed over anyway – you&amp;rsquo;ll hit some limitation or bug that requires SQL instead of ActiveRecord and you fill in the gaps of your understanding when you need to.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the blog post. People have different perspectives and they&amp;rsquo;re valid and also different abstractions are useful so learn a bunch, but don&amp;rsquo;t worry about it too much and definitely don&amp;rsquo;t feel obligated when someone tells you &amp;ldquo;well actually, &lt;em&gt;real&lt;/em&gt; programmers program in &lt;em&gt;my favourite thing&lt;/em&gt;.&amp;rdquo; &lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try to go easy on complaining when other people like different abstraction levels than the ones we like. And when we disagree with someone about something technical, we can save a lot of back-and-forth by asking ourselves &amp;ldquo;are we talking in the same abstraction level?&amp;rdquo; &lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll figure this out, we all will. Just remember: expertise is only just informed opinion (and a little ZF Set Theory, I guess).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Freedom Interview</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/freedom-interview/"/>
    <id>https://ashfurrow.com/blog/freedom-interview/</id>
    <published>2018-05-10T14:55:04+00:00</published>
    <updated>2018-05-10T14:55:04+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;I was was &lt;a href="https://freedom.to/blog/ios-developer-ash-furrow-on-fighting-distraction-and-forgetting-fomo/"&gt;interviewed on the Freedom blog&lt;/a&gt; about fighting distraction and fear-of-missing-out. Check it out!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Freedom is an app I used that blocks websites like Twitter, Facebook, YouTube, etc by redirecting network requests to those sites to localhost, which essentially makes them unreachable. I use it in the morning to help me stay focused on getting out the door, and I&amp;rsquo;ve noticed that good mornings are correlated with good days. Freedom is a good treatment for &lt;a href="https://www.esquire.com/news-politics/a19505007/internet-broken-brain/"&gt;Internet Broken Brain Syndrome&lt;/a&gt;, so check it out if you too are Extremely Online.&lt;/p&gt;
</content>
  </entry>
</feed>
