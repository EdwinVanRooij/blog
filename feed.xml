<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ash Furrow</title>
  <id>https://ashfurrow.com/blog</id>
  <link href="https://ashfurrow.com/"/>
  <link href="https://ashfurrow.com/feed.xml" rel="self"/>
  <updated>2018-10-31T18:02:12+00:00</updated>
  <author>
    <name>Ash Furrow</name>
  </author>
  <entry>
    <title>First JS Meetup Talk</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/first-js-meetup-talk/"/>
    <id>https://ashfurrow.com/blog/first-js-meetup-talk/</id>
    <published>2018-10-31T18:02:12+00:00</published>
    <updated>2018-10-31T18:02:12+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Hey! So not a lot of posts over the past six months, what&amp;rsquo;s Ash been up to, eh? Well, besides moving to a new apartment, and &lt;a href="http://artsy.github.io/author/ash/"&gt;blogging for Artsy&lt;/a&gt;, I&amp;rsquo;ve been learning more JavaScript! Specifically, a lot more about JS tooling. &lt;/p&gt;

&lt;p&gt;Last night, I gave &lt;a href="https://www.meetup.com/TypeScriptNYC/events/255170060/"&gt;my first meetup talk&lt;/a&gt; in the JavaScript developer community at &lt;a href="https://www.meetup.com/TypeScriptNYC/"&gt;TypeScript NYC&lt;/a&gt;. It went really well!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I did a live coding demo of how to write custom &lt;a href="https://palantir.github.io/tslint/"&gt;TSLint&lt;/a&gt; rules. TSLint is a tool that checks your &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; code for style problems. You can think of it like &lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt;, but for TypeScript. I&amp;rsquo;ve been working on some TSLint rules at Artsy and I thought I would share what I&amp;rsquo;ve learned over the past month or so.&lt;/p&gt;

&lt;p&gt;The talk wasn&amp;rsquo;t recorded, but &lt;a href="https://speakerdeck.com/ashfurrow/building-custom-tslint-rules"&gt;the slides are available&lt;/a&gt; and the &lt;a href="https://github.com/ashfurrow/tsnyc-tslint-rules/blob/master/STEPS.md"&gt;steps I took are documented&lt;/a&gt;. I also have &lt;a href="https://github.com/ashfurrow/tslint-playground"&gt;further reading in this readme&lt;/a&gt;. The meetup audience was very patient and helpful as I worked through the live-coding demo, and were appropriately mind-blown at the end of the talk. I&amp;rsquo;ll definitely come back to this meetup, because the other talks were really interesting, too.&lt;/p&gt;

&lt;p&gt;In 2018, I&amp;rsquo;ve had a blast learning more about module resolution, Babel, the TypeScript compiler, and more. It&amp;rsquo;s a really exciting time for me because I&amp;rsquo;m starting to feel both productive and confident when working in Artsy&amp;rsquo;s various JS-based projects. I&amp;rsquo;ve said this before, but I don&amp;rsquo;t consider myself an &amp;ldquo;iOS developer&amp;rdquo; anymore because the title is too limiting. I solve problems; sometimes that means &lt;a href="https://github.com/artsy/emission/pull/1211"&gt;hunting down crashes in Objective-C&lt;/a&gt; and sometimes that means &lt;a href="https://github.com/Microsoft/TypeScript/pull/28196"&gt;sending the TypeScript compiler a pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m excited.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sad &amp; Sappy Songs</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/sad-sappy-songs/"/>
    <id>https://ashfurrow.com/blog/sad-sappy-songs/</id>
    <published>2018-10-05T00:30:52+00:00</published>
    <updated>2018-10-05T00:30:52+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://www.artsy.net/artist/mark-rothko"&gt;Mark Rothko&lt;/a&gt;, frustrated with an obtuse interviewer, &lt;a href="https://youtu.be/qFnNgTSkHPM?t=412"&gt;is claimed to have explained&lt;/a&gt; his art by exclaiming: &amp;ldquo;you’ve got sadness in you, I’ve got sadness in me – and my works of art are places where the two sadnesses can meet, and therefore both of us need to feel less sad.&amp;rdquo; As a musician, that really resonates with me. Sometimes, a sad song is exactly what I need to hear (or play) to feel better.&lt;/p&gt;

&lt;p&gt;So I present: &lt;a href="https://www.youtube.com/watch?v=1pIf5VPhmco&amp;amp;list=PLBygl72DbBTHIpDE63lPSvddwHs6FbgRQ"&gt;three sad and sappy songs&lt;/a&gt;, because it&amp;rsquo;s 2018 and we need something else to feel sad about for just a few minutes of relief.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/1pIf5VPhmco' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/gFIWrGecnH0' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/qMpcN0DaX9E' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;



&lt;p&gt;(This is my second year playing guitar at Artsy Salon, after &lt;a href="https://ashfurrow.com/blog/guitar-debut/"&gt;debuting on guitar&lt;/a&gt; last year. I&amp;rsquo;m really happy with how far I&amp;rsquo;ve progressed since then – I feel so much more comfortable performing in front of people. &amp;ldquo;&lt;a href="https://www.instagram.com/p/Bka0O3mAtbu/"&gt;Practice&lt;/a&gt;, &lt;a href="https://ashfurrow.com/blog/just-play/"&gt;practice&lt;/a&gt;, &lt;a href="https://ashfurrow.com/blog/progress-and-pianos/"&gt;practice&lt;/a&gt;&amp;rdquo;, my piano teacher always used to say.)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Snapshot Testing on iOS</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/snapshot-testing-on-ios/"/>
    <id>https://ashfurrow.com/blog/snapshot-testing-on-ios/</id>
    <published>2018-07-21T14:09:45+00:00</published>
    <updated>2018-07-21T14:09:45+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;&amp;ldquo;Snapshot testing&amp;rdquo; is a phrase that you&amp;rsquo;ll hear in circles of developers who are into unit testing. Conceptually, snapshot testing is a simple idea: take a screenshot of your user interface and store it as a reference image. Then, make unit tests to take screenshots of the same UI and compare it to the reference image. Facebook created, and Uber now maintains, &lt;a href="https://github.com/uber/ios-snapshot-test-case"&gt;ios-snapshot-test-case&lt;/a&gt;, a testing framework that makes this process really easy. Lots of us have written testing tools on top of ios-snapshot-test-case and have been using it in production for a few years now.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s the question that I want to discuss: is it worth it?&lt;/p&gt;

&lt;p&gt;tl;dr yeah it is totally worth it, but (like any technique) you want to be careful about over-doing it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The idea to write this post came from a friend who shared this trick to display before and after screenshots in GitHub pull requests using Markdown tables.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;🔥 Pull Request Description Tip&lt;br&gt;&lt;br&gt;Using tables is useful for showing before/after screenshots in PRs touching the UI. &lt;a href="https://t.co/lYhfQX30T5"&gt;pic.twitter.com/lYhfQX30T5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gio 💻🔧📚 (@mokagio) &lt;a href="https://twitter.com/mokagio/status/1019709696872087557?ref_src=twsrc%5Etfw"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;The conversation turned to snapshot testing; a consequence of snapshot testing  would be that you don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to include before/after shots in your PR description because they&amp;rsquo;d be included for you in the PR&amp;rsquo;s changed files. Think about it: your reference images are essentially screenshots of your UI – and they&amp;rsquo;re stored in your repository. So when you open a PR that changes the UI, your PR will necessarily include changes to those references images, showing the before and after of the UI changes. Neat!&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;That’s awesome!&lt;br&gt;&lt;br&gt;I was considering a spike to set up some snapshot testing at work too. &lt;br&gt;&lt;br&gt;Would you say it’s worh the time? &lt;br&gt;&lt;br&gt;Does it often reveal defects like that? False positive?&lt;/p&gt;&amp;mdash; Gio 💻🔧📚 (@mokagio) &lt;a href="https://twitter.com/mokagio/status/1020081618239668224?ref_src=twsrc%5Etfw"&gt;July 19, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Is it worth the time? Yes, for our team it was.&lt;/p&gt;

&lt;p&gt;Does it reveal defects? Yes it does – let me give you an example from last week at Artsy.&lt;/p&gt;

&lt;p&gt;We have this button class, &lt;a href="https://github.com/artsy/eigen/blob/052e79a29e6208a099a4972ad0c17158499776b0/Artsy/Views/Styled_Subclasses/Buttons/ARBidButton.m"&gt;&lt;code&gt;ARBidButton&lt;/code&gt;&lt;/a&gt;, which is given an &lt;code&gt;ARAuctionState&lt;/code&gt; and is responsible for updating its background colours, text colours, enabled state, and text. We include this button on artwork views in auctions so the user can bid on them. We wanted to change some of the render logic in the button, but we inadvertently broke another part of our app that we didn&amp;rsquo;t realize was using &lt;code&gt;ARBidButton&lt;/code&gt; too. &lt;a href="https://github.com/artsy/eigen/pull/2659"&gt;Here is the original pull request&lt;/a&gt; and &lt;a href="https://github.com/artsy/eigen/pull/2667"&gt;here is the second attempt&lt;/a&gt; we made (once we realized the button was used elsewhere).&lt;/p&gt;

&lt;p&gt;If we hadn&amp;rsquo;t had snapshot tests for different parts of our UI, we wouldn&amp;rsquo;t have noticed that the small change we wanted to make would have inadvertent changes elsewhere in our app.&lt;/p&gt;

&lt;p&gt;But what about drawbacks? Is snapshot testing worth it? Well, let&amp;rsquo;s back up and get more context.&lt;/p&gt;

&lt;p&gt;Developers who are familiar with different testing strategies eventually form an intuitive understanding of what&amp;rsquo;s formally called the &amp;ldquo;testing pyramid.&amp;rdquo; Here is a depiction of the pyramid that I borrowed from &lt;a href="https://gkedge.gitbooks.io/javascript-acceptance-testing/content/"&gt;this unit testing book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/snapshot-testing-on-ios/pyramid.jpg" alt="Unit testing triangle" /&gt;&lt;/p&gt;

&lt;p&gt;The idea is that some tests are really quick to run (automated unit tests) and others take a really long time to run (manual tests). The testing pyramid models the spectrum between the two: if a test is expensive to run, the pyramid tells you to run fewer of those tests. The pyramid helps developers balance the competing demands of testing (to ensure quality) and shipping quickly (to stay in business).&lt;/p&gt;

&lt;p&gt;Snapshot testing sits right on that barrier between &amp;ldquo;did we build it right?&amp;rdquo; and &amp;ldquo;did we build the right thing?&amp;rdquo; That means that, while snapshot testing is useful, it shouldn&amp;rsquo;t be your &lt;em&gt;entire&lt;/em&gt; testing strategy. You will still need unit tests and manual tests, but snapshot tests really help fill in the gap between the two.&lt;/p&gt;

&lt;p&gt;So, with the testing pyramid in mind, let&amp;rsquo;s return to the question: is it worth it? Well, let&amp;rsquo;s run down some quick pros and cons.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Reference image changes provide an opportunity for designers to give feedback on pull requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Reference images have a large filesize and can change frequently, which can lead to a ballooning git repository size (&lt;a href="https://github.com/artsy/eigen"&gt;our repo&lt;/a&gt; that makes the heaviest use of snapshot testing is 500MB on disk).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: &lt;a href="https://github.com/pointfreeco/swift-snapshot-testing"&gt;Lots&lt;/a&gt; &lt;a href="https://github.com/ashfurrow/Nimble-Snapshots"&gt;of&lt;/a&gt; &lt;a href="https://github.com/dblock/ios-snapshot-test-case-expecta"&gt;tools&lt;/a&gt; &lt;a href="https://github.com/ashfurrow/second_curtain"&gt;exist&lt;/a&gt; to make snapshot testing even more useful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Tooling for snapshot testing, such as &lt;a href="https://github.com/orta/Snapshots"&gt;this project&lt;/a&gt;, are hampered by Xcode&amp;rsquo;s extremely limited plugin API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Snapshot tests are a very broad-strokes confirmation that your UI is &amp;ldquo;correct.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot testing can only test static UIs and not things like animations or user interaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Testing across devices, iOS versions, and size classes becomes trivial.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot testing introduces additional complexity to your testing setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: iOS-snapshot-test-case has tools for allowing a specified percentage of differing pixels, along with other customization options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: iOS versions often include changes to text antialiasing, so your tests need to be tied to specific iOS versions. Updating reference images when you update your iOS versions introduces a lot of churn in reference image files, contributing to repo size bloat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Snapshot testing encourages you to write testable view controllers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: It&amp;rsquo;s easy to overdo snapshot tests, &lt;em&gt;feel&lt;/em&gt; confident in your app&amp;rsquo;s correctness, but not actually be testing the correct thing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot test failures on CI can&amp;rsquo;t be reviewed, since the image files aren&amp;rsquo;t accessible (it&amp;rsquo;s &lt;a href="https://github.com/ashfurrow/second_curtain"&gt;not difficult to get around this with an S3 bucket&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I have no regrets about our snapshot testing strategy, but others will have different approaches. A lot of the cons that I&amp;rsquo;ve outlined above have workarounds (one could, for example, store reference images in a submodule to mitigate repo bloat). And snapshot testing is really an open field: if you have an idea for a tool, you could probably build it on top of tools that already exist.&lt;/p&gt;

&lt;p&gt;If you decide to try snapshot testing, I can&amp;rsquo;t recommend &lt;a href="https://www.kaleidoscopeapp.com"&gt;Kaleidoscope&lt;/a&gt; enough. Its integration into &lt;code&gt;git difftool&lt;/code&gt; makes reviewing changes to reference images &lt;em&gt;before&lt;/em&gt; opening a PR really easy.&lt;/p&gt;

&lt;p&gt;I hope that gives you a clear picture of what snapshot tests are and how they can be used as a part of a comprehensive testing strategy. It&amp;rsquo;s a cliché, but snapshot tests are not a silver bullet. They will not be a replacement for unit testing. But they can help you write better code, be more confident in your product, and open up whole new ways to collaborate with non-developer colleagues. They&amp;rsquo;re definitely worth learning about – a tool worth having in your toolbox.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thinking Critically About Apple</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/thinking-critically-about-apple/"/>
    <id>https://ashfurrow.com/blog/thinking-critically-about-apple/</id>
    <published>2018-07-19T14:15:03+00:00</published>
    <updated>2018-07-19T14:15:03+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday I tweeted a complaint I had about Apple&amp;rsquo;s iOS SDK. My complaint highlighted one instance of a larger trend in Apple&amp;rsquo;s behaviour towards their SDK design and documentation; I&amp;rsquo;m far more interested in the trend than I am in any given SDK issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Apple&amp;rsquo;s stubborn refusal to provide a simple API to determine if you&amp;rsquo;re on an iPhone X causes developers to check for hardcoded screen dimensions, which is worse than developers making device-specific layouts. Don&amp;rsquo;t @ me.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1019631126585978881?ref_src=twsrc%5Etfw"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Despite my request to not be replied to, people did. They really seemed to want to discuss the specifics of this issue. But, to repeat myself: I don&amp;rsquo;t care about this specific complaint, I care about the larger trend.&lt;/p&gt;

&lt;p&gt;So what is that trend? Well it&amp;rsquo;s complicated and it involves critical thinking; if you&amp;rsquo;ve never thought critically about Apple before, this might seem like a really weird thing to complain about, but here&amp;rsquo;s my issue:&lt;/p&gt;

&lt;p&gt;Apple designs its SDK based on how Apple wants the community to build software. However, sometimes the way Apple wants you to build things and the way you want to build things is going to differ.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I really wish &amp;ldquo;you should think critically about Apple&amp;rdquo; weren&amp;rsquo;t such a hot take in the iOS developer community, but here we are.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1004406015956221953?ref_src=twsrc%5Etfw"&gt;June 6, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;This attitude Apple has (&amp;ldquo;you can either build how they want you to build, or get out&amp;rdquo;) obviously has advantages and disadvantages. I&amp;rsquo;m not saying it&amp;rsquo;s absolutely bad, I&amp;rsquo;m saying that &lt;em&gt;I&lt;/em&gt; am often frustrated by it. My complaints on twitter are not meant to deride Apple, but rather to draw the community&amp;rsquo;s attention to how Apple&amp;rsquo;s motivations and their own motivations are not the same. (This fact seems obvious to me but I often get pushback from community developers, which boggles my mind.)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Thinking critically about Apple would involve asking questions about their decisions. Let’s take how they deprecated OpenGL for example. Who does this benefit? Who does it harm? What are the implications? Those sorts of questions need to get asked.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1004708649896435712?ref_src=twsrc%5Etfw"&gt;June 7, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Sometimes, when trying to define a problem with how you work, it&amp;rsquo;s helpful to step outside your experience and get a different perspective. Let&amp;rsquo;s contrast how Apple treats its SDK design with another platform: React.&lt;/p&gt;

&lt;p&gt;Whereas Apple&amp;rsquo;s philosophy could be characterized as &amp;ldquo;this is how to build software for our platform, take it or leave it&amp;rdquo;, React could described with &amp;ldquo;this is how to build software for our platform, but sometimes you might need to escape our abstractions, and here&amp;rsquo;s how to do that.&amp;rdquo; You might think I&amp;rsquo;m being hyperbolic, but let&amp;rsquo;s look at the docs for &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;imperatively accessing DOM elements outside of React&amp;rsquo;s lifecycle&lt;/a&gt;. The technical details don&amp;rsquo;t matter here – just pay attention to their tone:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your first inclination may be to use refs to “make things happen” in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In rare cases, you might want to have access to a child’s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s a huge shift from Apple&amp;rsquo;s approach to, for example, the iPhone X API that I tweeted about yesterday. React&amp;rsquo;s docs caution you against overusing this escape hatch from their SDK, but they also explain in detail how to do it.&lt;/p&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just me, but this difference is really striking. It exemplifies the distinction that I&amp;rsquo;m trying to highlight.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not saying Apple needs to change or that you need to change your mind or anything. Not everything I say is meant to be persuasive. All I&amp;rsquo;m saying is: Apple is its own company with its own motivations. Do not forget that, and do not conflate what&amp;rsquo;s good for you with what&amp;rsquo;s good for Apple.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Airbnb and React Native Expectations</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/airbnb-and-react-native-expectations/"/>
    <id>https://ashfurrow.com/blog/airbnb-and-react-native-expectations/</id>
    <published>2018-06-23T16:42:18+00:00</published>
    <updated>2018-06-23T16:42:18+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;By now, most iOS developers have probably heard the news that &lt;a href="https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c"&gt;Airbnb is moving away from React Native&lt;/a&gt;. It&amp;rsquo;s kind of weird to see the reaction online – people are acting jubilant, almost &lt;em&gt;celebrating&lt;/em&gt; the announcement. I see some iOS developers on twitter practically &lt;em&gt;rolling their eyes&lt;/em&gt; at Airbnb for even &lt;em&gt;trying&lt;/em&gt; React Native. But I&amp;rsquo;m not here to talk about insularity of the iOS developer community, I&amp;rsquo;m here to talk about Airbnb&amp;rsquo;s (quite excellent) blog posts.&lt;/p&gt;

&lt;p&gt;These blog posts are excellent because Airbnb first lays out its expectations for React Native, and then explains how well the technology met (or failed to meet) those expectations. It&amp;rsquo;s a thorough, honest discussion about how large teams evaluate technologies, as well as how those team live with the consequences of their decisions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So I really like these posts, but I wouldn&amp;rsquo;t say that they&amp;rsquo;re &lt;em&gt;complete&lt;/em&gt;. More on that later. First, I want to discuss Airbnb&amp;rsquo;s actual expectations. I&amp;rsquo;m going to summarize them here, but you really, really should &lt;a href="https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c"&gt;read the posts yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are Airbnb&amp;rsquo;s goals for React Native, which I&amp;rsquo;m interpreting as their expectations for the technology:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allow us to &lt;strong&gt;move faster&lt;/strong&gt; as an organization.&lt;/li&gt;
&lt;li&gt;Maintain the &lt;strong&gt;quality bar&lt;/strong&gt; set by native.&lt;/li&gt;
&lt;li&gt;Write product code &lt;strong&gt;once&lt;/strong&gt; for mobile instead of &lt;strong&gt;twice&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Improve upon the &lt;strong&gt;developer experience&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, so how did those four things go? Well, I&amp;rsquo;ll summarize again:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Engineers were able to move at an unparalleled speed&amp;rdquo;&lt;/em&gt;, but also there were also technical and cultural hurdles that mitigated this success.&lt;/li&gt;
&lt;li&gt;Again, a qualified success: &lt;em&gt;&amp;ldquo;we were able to accomplish a number of things that we weren’t sure were possible.&amp;rdquo;&lt;/em&gt; But they point to the same technical challenges and a lack of internal engineering resources that frustrated their team sometimes.&lt;/li&gt;
&lt;li&gt;This was a failure(&lt;strong&gt;*&lt;/strong&gt;): &lt;em&gt;&amp;ldquo;we wound up supporting code on three platforms instead of two&amp;rdquo;&lt;/em&gt;, which sounds grim. But also, &lt;em&gt;&amp;ldquo;only a small percentage of our app was React Native&amp;rdquo;&lt;/em&gt;, meaning they had a lot of overhead for not a lot benefit. I want to discuss this expectation in more detail, but more on that in a minute.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;&amp;ldquo;mixed bag&amp;rdquo;&lt;/em&gt;, which some things being way easier and faster, while other things were worse.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;(&lt;strong&gt;*Note&lt;/strong&gt;: my characterization of #3 as a failure has been disputed; you should go read &lt;a href="https://twitter.com/intelligibabble/status/1010948686501691393"&gt;Leland Richardson&amp;rsquo;s thread&lt;/a&gt; responding to me to get a really great, nuanced clarification of Airbnb&amp;rsquo;s experience sharing code between Android and iOS.)&lt;/p&gt;

&lt;p&gt;Okay so at first glance, this seems kind of promising, right? I mean, Airbnb says that &amp;ldquo;60% [of engineers] would describe their experience as amazing&amp;rdquo;, so a &lt;em&gt;majority&lt;/em&gt; of your team is on board. But 5% were &amp;ldquo;strongly negative&amp;rdquo;? Interesting. Very interesting. We&amp;rsquo;ll get back to this shortly, first let&amp;rsquo;s talk about that third expectation.&lt;/p&gt;

&lt;p&gt;The big point everyone is talking about is number three: Airbnb expected to be able to reuse code across Android and iOS but were let down. They wanted that &amp;ldquo;write once, run everywhere&amp;rdquo; experience. And that&amp;rsquo;s the problem that I have with these posts and how they&amp;rsquo;re being discussed.&lt;/p&gt;

&lt;p&gt;React Native is &lt;a href="https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/"&gt;explicitly &lt;strong&gt;not&lt;/strong&gt; &amp;ldquo;write once, run everywhere&amp;rdquo;&lt;/a&gt;, although this is a common misconception. The idea that you can write one app and deploy to Android and iOS is attractive, and solutions like &lt;a href="https://expo.io"&gt;Expo&lt;/a&gt; do exist to do that, but cross-platform code reuse is &lt;em&gt;not&lt;/em&gt; the central selling point of React Native. React Native is a &amp;ldquo;learn once, write everywhere&amp;rdquo; platform; instead of building one app for multiple platforms, the main selling point of React Native is that &lt;a href="https://ashfurrow.com/blog/the-case-for-react-native/"&gt;it lets you use React&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;So when people frame Airbnb&amp;rsquo;s decision as a &lt;em&gt;failure&lt;/em&gt; of React Native, I wonder about how much they really understand about what React Native is &lt;em&gt;for&lt;/em&gt;. If you have an expectation that a technology can do something that it&amp;rsquo;s not designed for, and then you&amp;rsquo;re disappointed when it fails to deliver, it&amp;rsquo;s not really the technology&amp;rsquo;s fault, is it? And further, if &amp;ldquo;only a small percentage&amp;rdquo; of your app even &lt;em&gt;uses&lt;/em&gt; that technology, then you don&amp;rsquo;t get as much of the benefits.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m trying not to frame this as an Artsy-vs-Airbnb discussion, but it&amp;rsquo;s hard to avoid the comparison because Artsy has had &lt;a href="http://artsy.github.io/series/react-native-at-artsy/"&gt;such overwhelming success&lt;/a&gt; with our React Native stack. I think a big part of that comes from how we structured our React Native code: all the JavaScript is in &lt;a href="https://github.com/artsy/emission"&gt;its own repository&lt;/a&gt; and it &lt;a href="http://artsy.github.io/blog/2018/04/17/making-a-components-pod/"&gt;gets shipped as a CocoaPod&lt;/a&gt;. The &lt;a href="https://github.com/artsy/eigen"&gt;native app&lt;/a&gt; just imports that pod and instantiates view controllers from it as if they were normal view controllers (because they &lt;em&gt;are&lt;/em&gt;, their views just happen to be React Native components). Our native codebase was using React Native for a year before I even wrote &lt;em&gt;any&lt;/em&gt; JavaScript, which minimized the overhead for me, a person who was pretty unhappy that JavaScript was in Artsy&amp;rsquo;s app at all.&lt;/p&gt;

&lt;p&gt;And that kind of leads me back to culture. I think these blog posts do an excellent job of describing the &lt;em&gt;technical&lt;/em&gt; parts of their experience, but they lack a detailed description of non-technical barriers to adopting React Native.&lt;/p&gt;

&lt;p&gt;What kind of barriers? Well, not to bring up the insularity of the iOS developer community again, but&amp;hellip; iOS developers kind of have a reputation within the broader software industry. Charlie Cheever, &lt;a href="https://blog.expo.io/should-we-use-react-native-1465d8b607ac"&gt;writing about this topic&lt;/a&gt; from Expo&amp;rsquo;s perspective, has this to say:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] organizations where there are people who identify themselves strongly as iOS programmers and Android programmers have a really hard time being happy with React Native. &lt;strong&gt;iOS programmers in particular are very unhappy&lt;/strong&gt; with it and generally &lt;strong&gt;regard JS as an infestation&lt;/strong&gt; of the company’s codebase, while Android programmers have more mixed feelings.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;(Emphasis added.)&lt;/p&gt;

&lt;p&gt;When I see a majority of a team describe their experience as &amp;ldquo;amazing&amp;rdquo;, and a very small (but very vocal, I&amp;rsquo;m sure) minority of the team describe it as &amp;ldquo;strongly negative&amp;rdquo;, it really makes me wonder about the internal discussions about React Native at Airbnb.&lt;/p&gt;

&lt;p&gt;And I get it, I really do. &lt;em&gt;I&lt;/em&gt; thought JavaScript was an infestation, too. It &lt;a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/"&gt;took a long time for me to get over it&lt;/a&gt;. I mean, if you&amp;rsquo;ve been hired to write Swift/Objective-C and all of a sudden your team asks you to use JavaScript instead, it&amp;rsquo;s natural to feel frustrated, or even angry. But you know what else? Engineers don&amp;rsquo;t just write code, they &lt;em&gt;solve problems&lt;/em&gt;. Of course engineers are going to have feelings about the tools their team use, and I think a future blog post should cover how Artsy worked to mitigate the cultural tensions between native iOS developers and our React Native choice. But I wish we&amp;rsquo;d keep our feelings in check a little bit more.&lt;/p&gt;

&lt;p&gt;Airbnb&amp;rsquo;s experience has been compared, &lt;a href="https://twitter.com/spikebrehm/status/1010279535319879680"&gt;appropriately&lt;/a&gt;, to a rejected organ transplant. If your company&amp;rsquo;s culture is really, really into iOS native development, then the organ will be rejected.&lt;/p&gt;

&lt;p&gt;The reasons that Airbnb chose to move away from React Native are cultural as much as they are technical, and while I understand why they didn&amp;rsquo;t publicize these tensions, it gives the impression that Airbnb&amp;rsquo;s decision was based entirely in technical merit. And that&amp;rsquo;s just not the case.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Case for React Native</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/the-case-for-react-native/"/>
    <id>https://ashfurrow.com/blog/the-case-for-react-native/</id>
    <published>2018-06-15T18:18:35+00:00</published>
    <updated>2018-06-15T18:18:35+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;It occurred to me that there is a missing piece to the conversations around React Native - the React abstraction itself! Rather than getting stuck in debates about &lt;a href="https://ashfurrow.com/blog/javascript-is-good-actually/"&gt;the quality of JavaScript&lt;/a&gt;, I&amp;rsquo;d like to talk about this aspect of the React Native choice. If you&amp;rsquo;re open-minded, if you accept that the JavaScript language is as excellent as I say it is, and if you&amp;rsquo;re curious about why some people just seem so excited to use JavaScript to write iOS apps, I would love to explain my perspective.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="react-itself-is-amazing"&gt;React Itself is Amazing&lt;/h2&gt;

&lt;p&gt;Okay so in order to understand React, it helps to understand the history of why React was built. Programming user interfaces for the web browser has sucked, since forever, and over the decades different teams have tried different approaches to make it suck less. This sounds kind of crappy, and for a while it really was, but then something really curious happened: the pressure to find a better way to build web software kept building and building until it outweighed the difficulty of the constraints of web browsers. The overwhelming amount of pressure to mitigate the awfulness of web programming led to a lot of really innovative ideas. One of the most famous ones is &lt;a href="https://jquery.com"&gt;jQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;jQuery made it really easy to interact with the HTML elements on the web page (called the DOM). Many cool frontend JavaScript frameworks are built atop jQuery. The only problem was that the DOM API itself – the API that jQuery sits atop – is really slow.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Really slow&amp;rdquo; is a relative term, so let&amp;rsquo;s unpack what that means. Certain changes to the DOM can trigger what&amp;rsquo;s called a &lt;a href="https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Notes_on_HTML_Reflow"&gt;reflow&lt;/a&gt; – basically, the layout of the website gets re-calculated by the browser. A reflow is a &lt;strong&gt;synchronous&lt;/strong&gt; event that can be easily triggered inadvertently by programmers, and it&amp;rsquo;s easy for web apps to have performance problems based on this bottleneck (you can &lt;a href="http://kellegous.com/j/2013/01/26/layout-performance/"&gt;read more about layout thrashing here&lt;/a&gt;). Browser makers go to great lengths to optimize their reflow algorithms, but the easiest win for web app performance is being smart about when to trigger a reflow. &lt;/p&gt;

&lt;p&gt;A kind of arms race between frameworks for web performance has been going for years, and it&amp;rsquo;s been really exciting!  And that brings us to React. React solves the slow DOM API problem by abstracting away the &lt;em&gt;state&lt;/em&gt; of the application. There are lots of implementation details (like, people usually mention the &lt;a href="https://reactjs.org/docs/faq-internals.html"&gt;Virtual DOM&lt;/a&gt; when explaining React) but the most important thing is that React is &lt;em&gt;declarative&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what the heck is that? Well it takes a second to explain.&lt;/p&gt;

&lt;p&gt;User interfaces are built in React by building and composing reusable &lt;em&gt;components&lt;/em&gt;, which are little pieces of code that turn input properties (called props) into a user interface. A React app is really just a big tree of components; each parent passes its child components the props that the child needs to render itself, and so on. This is &lt;em&gt;declarative&lt;/em&gt; because if a component is passed the same props, it will produce the same user interface every time.&lt;/p&gt;

&lt;p&gt;Because of the stateless nature of the components, aggressive optimizations can be made to minimize DOM updates. And holy smokes is it ever optimized. Plus, there are some amazing tools that can be built on top of a framework that abstracts state into a plain JavaScript object that be tracked over time.&lt;/p&gt;

&lt;p&gt;(Components can maintain their own internal state independent of React, but it&amp;rsquo;s totally private to that component and can only be modified through a centralized, asynchronous API.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always liked (&lt;a href="https://ashfurrow.com/blog/reactivecocoa-vs-rxswift/"&gt;and advocated for&lt;/a&gt;) iOS functional reactive frameworks like &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt;, &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt;, &lt;a href="https://github.com/JensRavens/Interstellar"&gt;Interstellar&lt;/a&gt;, etc on iOS. However, I&amp;rsquo;ve never felt &lt;em&gt;entirely&lt;/em&gt; satisfied by them. They are an excellent way to handle state, but they themselves operate within and are built atop a stateful abstraction layer (UIKit). Subsequently, the complexity of these frameworks is fundamentally constrained on the lower bounds in a way that React isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s just too much incidental complexity to how these frameworks need to integrate with the rest of the app. Contrast that complexity with React, where there are no observables or flat maps or signal transforms; you just write components in declarative way and you get all the benefits of reactive UIs for free.  &lt;/p&gt;

&lt;p&gt;Yeah, for free.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s like a functional reactive programmer&amp;rsquo;s dream. Unidirectional data flow, asynchronous everything, everything, it&amp;rsquo;s so good. The declarative abstraction that React provides is elegant and thoughtful, and the React developers have continuously improved the API and tooling for React over the past five years.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re keen to learn more, you should check out the &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;React tutorial&lt;/a&gt;; it includes a great, in-depth explanation of why immutability and declarative APIs are so important. You can also read &lt;a href="https://medium.freecodecamp.org/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76"&gt;more about why React is so popular here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My point is: React is unbelievably good. But it&amp;rsquo;s not the only reason to use React Native.&lt;/p&gt;

&lt;h2 id="the-javascript-ecosystem-is-also-amazing"&gt;The JavaScript Ecosystem is Also Amazing&lt;/h2&gt;

&lt;p&gt;iOS developers are a smaller community than web developers, who tend to specialize more. The web has also been around longer, too, and it&amp;rsquo;s lacked any authority to direct its development. How cool is that! A whole other community of developers, evolving under totally different constraints.&lt;/p&gt;

&lt;p&gt;JavaScript tools are often written &lt;em&gt;in&lt;/em&gt; JavaScript themselves, so what you get is a really low barrier to entry for people to build new tools, experiment with ideas, and of course, to make the everyday incremental improvements necessary for an ecosystem to thrive. Just like with iOS, the quality of any given OSS framework or tool is going to vary, but the sheer size of the web developer community and a more open perspective on tool building has produced a &lt;em&gt;lot&lt;/em&gt; of great tools.&lt;/p&gt;

&lt;p&gt;And if you build your iOS app in React Native, you get access to that ecosystem. That means &lt;a href="https://facebook.github.io/relay/"&gt;Relay&lt;/a&gt;/&lt;a href="https://www.apollographql.com"&gt;Apollo&lt;/a&gt;, &lt;a href="https://www.styled-components.com"&gt;styled components&lt;/a&gt;, &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt;, &lt;a href="https://github.com/airbnb/enzyme"&gt;Enzyme&lt;/a&gt;, &lt;a href="https://prettier.io"&gt;prettier&lt;/a&gt;, &lt;a href="https://github.com/typicode/husky"&gt;Husky&lt;/a&gt;, many other great tools, and a long tail of less well-known but nonetheless very useful tools. I cannot do justice to this feeling, you just need to experience it to understand.&lt;/p&gt;

&lt;p&gt;People will validly complain about JavaScript developers relying on too many dependencies. When the native iOS developers at Artsy discuss the downsides of using React Native, we will tell you first thing about the dependencies. You kind of just&amp;hellip; adjust to it.&lt;/p&gt;

&lt;p&gt;There are big culture differences in OSS between the iOS and JavaScript developer communities. I think that JavaScript developers go a little too far, but I also think that iOS developers don&amp;rsquo;t go far enough. At Artsy, we see those differences on our engineering team. Sometimes, tensions surface between web and native developers contributing to the shared React Native codebase. It&amp;rsquo;s so fascinating to see how we approach the same problems from different perspectives. Each one of these tensions is an opportunity for us to learn from each other.&lt;/p&gt;

&lt;p&gt;So yes, you&amp;rsquo;ll have a lot of dependencies. But you&amp;rsquo;ll also learn to see building software from a new perspective.  That learning experience alone, to me, is a worth a few hundred node modules.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The thing is: this is all just what I think. Different people with different backgrounds and different priorities are going to come to different conclusions. I think that&amp;rsquo;s totally okay. There are lots of reasons not to use React Native; when my colleague Eloy &lt;a href="http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/"&gt;describes why Artsy adopted it&lt;/a&gt;, he literally begins with a bunch of React Native downsides. We&amp;rsquo;re not hiding anything!&lt;/p&gt;

&lt;p&gt;A lot of iOS apps (many? most?) can be entirely described as &amp;ldquo;software that turns API calls into user interfaces, and user interactions into API calls.&amp;rdquo; That&amp;rsquo;s a problem that React is tailored to solve, and React Native adopts that solution to iOS and Android really really well.&lt;/p&gt;

&lt;p&gt;React Native isn&amp;rsquo;t perfect, and it&amp;rsquo;s not suitable for every app. But nothing is! UIKit isn&amp;rsquo;t perfect for every app, either. There simply are no silver bullets in programming. React solves the problem of programming UIs to such a degree of success that, when combined with a fantastic language and a vibrant ecosystem, it makes a compelling case for use in a lot of apps.&lt;/p&gt;
</content>
  </entry>
</feed>
