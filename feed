<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://ashfurrow.com/feed.rss.xml" rel="self" type="application/rss+xml"/>
    <title>Ash Furrow</title>
    <description>Learning and teaching about interesting topics in iOS Development. Sometimes I diverge to talk about design, photography, or what-have-you.</description>
    <link>https://ashfurrow.com/</link>
    <item>
      <title>Freedom Interview</title>
      <link>https://ashfurrow.com/blog/freedom-interview/</link>
      <description>&lt;p&gt;I was was &lt;a href="https://freedom.to/blog/ios-developer-ash-furrow-on-fighting-distraction-and-forgetting-fomo/"&gt;interviewed on the Freedom blog&lt;/a&gt; about fighting distraction and fear-of-missing-out. Check it out!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Freedom is an app I used that blocks websites like Twitter, Facebook, YouTube, etc by redirecting network requests to those sites to localhost, which essentially makes them unreachable. I use it in the morning to help me stay focused on getting out the door, and I&amp;rsquo;ve noticed that good mornings are correlated with good days. Freedom is a good treatment for &lt;a href="https://www.esquire.com/news-politics/a19505007/internet-broken-brain/"&gt;Internet Broken Brain Syndrome&lt;/a&gt;, so check it out if you too are Extremely Online.&lt;/p&gt;
</description>
      <pubDate>Thu, 10 May 2018 14:55:04 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/freedom-interview/</guid>
    </item>
    <item>
      <title>All I Can Say is I'm Excited</title>
      <link>https://ashfurrow.com/blog/all-i-can-say-is-im-excited/</link>
      <description>&lt;p&gt;So it&amp;rsquo;s been a few months since I&amp;rsquo;ve &lt;a href="https://ashfurrow.com/blog/mood-improvements/"&gt;last blogged about my mood improvements&lt;/a&gt; and I wanted to check in, because a lot has happened since then.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To catch you up, I have completed my round of cognitive behavioural therapy (CBT) and am feeling great! My mood is consistent throughout the day, and usually hovers around &amp;ldquo;happy, excited.&amp;rdquo; I even have a graph for you to prove it, which I&amp;rsquo;m still a bit awestruck by (&lt;a href="https://gist.github.com/ashfurrow/406dfa25fa8aeba43abea5e52a81f2e8"&gt;plaintext data available&lt;/a&gt;).&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/all-i-can-say-is-im-excited/graph.png" alt="Graph of my mood" /&gt;&lt;/p&gt;



&lt;p&gt;So what does this mean? Well, you can see things got better after starting CBT. The graph doesn&amp;rsquo;t go back very far in time since I started keeping track of my mood shortly before starting CBT. But I was consistently feeling &amp;ldquo;down, worried&amp;rdquo;, &amp;ldquo;sad, unhappy&amp;rdquo;, or &amp;ldquo;miserable, nervous&amp;rdquo; (that last one indicates suicidal ideation, which you can see from the graph hasn&amp;rsquo;t occurred since February).&lt;/p&gt;

&lt;p&gt;Even though mostly I feel &amp;ldquo;happy, excited&amp;rdquo;, I still dip down. I mean, everyone feels sad or anxious sometimes. The difference now is that I have skills to deal with those feelings. I have learned to separate my thoughts from my reaction &lt;em&gt;to&lt;/em&gt; those thoughts, which is a key part of CBT.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t begin to tell you how different this feels. Because like, I&amp;rsquo;ve &lt;em&gt;been&lt;/em&gt; here before. I&amp;rsquo;ve felt better, I&amp;rsquo;ve &lt;a href="https://ashfurrow.com/blog/therapys-end/"&gt;blogged about ending therapy&lt;/a&gt;, I&amp;rsquo;ve felt good. But it never really lasted. This&amp;hellip; feels different. I think, for all the medications I&amp;rsquo;ve tried (and all the terrible side effects), all it took was a handful of CBT sessions.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;My favourite musician, John K Samson, also suffers from depression. He wrote a song about someone with mental illness – well, it&amp;rsquo;s more of a poem set to music. It tells the story of someone who struggles with delusional thinking, which isn&amp;rsquo;t depression, but it influences their mood, too. It&amp;rsquo;s haunting.&lt;/p&gt;



&lt;iframe src="https://open.spotify.com/embed/track/7jI7kdXqAgDpCq6Y6anYqc" width="100%" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"&gt;&lt;/iframe&gt;



&lt;p&gt;The nice thing about this song is that it&amp;rsquo;s immediately followed on the record by what Samson calls &amp;ldquo;a happy ending, of sorts.&amp;rdquo; It&amp;rsquo;s not a resolution – the character still has delusions – but they find happiness.&lt;/p&gt;



&lt;iframe src="https://open.spotify.com/embed/track/3GAoGRa1CilOHMQWb239Bm" width="100%" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"&gt;&lt;/iframe&gt;
  



&lt;p&gt;This song really resonated with me. Because the fact is, mental illnesses don&amp;rsquo;t really &lt;em&gt;have&lt;/em&gt; resolutions. Like, you can feel better, but it&amp;rsquo;s not like a stomach flu or something that you fully recover from. It sticks with you, and it&amp;rsquo;s going to stick with me, too. But you can live with it, which is what this character in the songs does. And it&amp;rsquo;s what I&amp;rsquo;m going to do.&lt;/p&gt;

&lt;p&gt;All I can say is I&amp;rsquo;m excited.&lt;/p&gt;
</description>
      <pubDate>Wed, 09 May 2018 18:31:59 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/all-i-can-say-is-im-excited/</guid>
    </item>
    <item>
      <title>JavaScript is Good, Actually</title>
      <link>https://ashfurrow.com/blog/javascript-is-good-actually/</link>
      <description>&lt;p&gt;The subtext of many discussions around building software in Electron and React/Native involve this assumption that &lt;em&gt;JavaScript is bad&lt;/em&gt;. There is a kind of unspoken understanding that JavaScript developers are &lt;em&gt;stuck&lt;/em&gt; writing it, that either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;given the choice, they would move to a &amp;ldquo;better&amp;rdquo; language, or&lt;/li&gt;
&lt;li&gt;they have a kind of Stockholm syndrome and like JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s not true. This framing discounts a tonne of developers – thousands and thousands of us – that &lt;em&gt;enjoy&lt;/em&gt; writing JavaScript. Not because it just happens to be popular or that we are forced to, either. Language like this robs JavaScript developers of our agency, treating us/our decisions/our preferences as invalid or even accidental.&lt;/p&gt;

&lt;p&gt;The fact is, we enjoy writing JavaScript because JavaScript is a good language. I&amp;rsquo;ll explain later.&lt;/p&gt;

&lt;p&gt;Oh wait, I&amp;rsquo;ll explain now.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="the-syntax"&gt;The Syntax&lt;/h2&gt;

&lt;p&gt;JavaScript syntax is a joy to use. It&amp;rsquo;s clear, concise, and tailored to the kinds of tasks that JavaScript developers tend to write code for. Here is an example, &lt;a href="https://github.com/artsy/emission/blob/365d34cba3bf96c74c6ae7f2615f37c82c669920/src/lib/Components/Consignments/Screens/Overview.tsx#L135-L150"&gt;taken from Artsy&amp;rsquo;s React Native app&lt;/a&gt;:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;submitFinalSubmission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showConfirmationScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ConsignmentSetup&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasSubmittedSuccessfully&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;updateSubmission&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;submission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"SUBMITTED"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submission_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consignmentsStateKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submissionDraftSubmitted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Overview final submission: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;hasSubmittedSuccessfully&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hasSubmittedSuccessfully&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;rsquo;ve never worked with modern JavaScript before, it might look a little weird. But I would bet that you understand the &lt;em&gt;gist&lt;/em&gt; of what this code is and does. And that&amp;rsquo;s pretty important, I think.&lt;/p&gt;

&lt;p&gt;I really like modern JavaScript syntax. Check out the &lt;a href="https://github.com/DrkSephy/es6-cheatsheet"&gt;ES6 Cheatsheet&lt;/a&gt; for a bunch of examples of how modern syntax makes JavaScript really nice to code in. Here is another great article describing &lt;a href="https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70"&gt;modern syntax&lt;/a&gt;, aimed at folks more familiar with older JavaScript. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going into more detail because syntax is&amp;hellip; well it&amp;rsquo;s not &lt;em&gt;that&lt;/em&gt; important to a language. Syntax is (I&amp;rsquo;m waving my hand dismissively here) just syntax. What matters more is the context in which syntax is used. Modern JavaScript syntax is very effective and suited to the kinds of problems that JavaScript developers solve. Don&amp;rsquo;t even get me started on how cool &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt; is.&lt;/p&gt;

&lt;p&gt;You may have noticed that the code above isn&amp;rsquo;t even JavaScript, it&amp;rsquo;s &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;, which brings me to my next point.&lt;/p&gt;

&lt;h2 id="the-toolchains"&gt;The Toolchains&lt;/h2&gt;

&lt;p&gt;Okay so one of the key parts of why JavaScript is great is the toolchains that surround it. Tools like TypeScript and &lt;a href="https://flow.org"&gt;Flow&lt;/a&gt; bring type safety to the language. Editors like &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; bring IDE-level features like autocomplete, inline documentation, an extension API, and more. Tools like &lt;a href="https://prettier.io"&gt;Prettier&lt;/a&gt;, &lt;a href="https://eslint.org"&gt;ESLint&lt;/a&gt;, and &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt; exist to make writing code easier and faster.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really difficult for me to describe just how foundational a paradigm shift I experienced when I began writing in JavaScript. My entire perspective on how code should be written changed. So it&amp;rsquo;s hard to describe in words how effective and how powerful these toolchains are. So let&amp;rsquo;s take a look at one small example.&lt;/p&gt;

&lt;p&gt;One argument against JavaScript that exemplifies how developers who are unfamiliar with JavaScript complain about problems that are obviated by toolchains is the &lt;code&gt;==&lt;/code&gt; operator. Ah yes, the humble equality check. Because of early design choices – I&amp;rsquo;d call them mistakes but I don&amp;rsquo;t have the full context – equality in JavaScript is a bit bizarre. &lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Isn’t this diagram from that one Nicolas Cage movie where he’s a JS developer looking for a lost treasure? &lt;a href="https://t.co/oK7NETXW5A"&gt;pic.twitter.com/oK7NETXW5A&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Patterson (@tenderlove) &lt;a href="https://twitter.com/tenderlove/status/992755305426685952?ref_src=twsrc%5Etfw"&gt;May 5, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(Note: Aaron is really really funny and you should give him a follow. He&amp;rsquo;s not the kind of developer to make facile complaints against JavaScript, I really enjoyed his tweet.)&lt;/p&gt;

&lt;p&gt;Since JavaScript is used all over the internet, you can&amp;rsquo;t really just &lt;em&gt;change&lt;/em&gt; the semantics around equality without breaking everything. JavaScript has harder constraints around backwards compatibility than many other popular languages; constraints like this are as much an opportunity as they are a liability. To wit: JavaScript introduced &lt;code&gt;===&lt;/code&gt; to solve this problem, which is just &lt;code&gt;==&lt;/code&gt; but it works as you expect. &lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;==&lt;/code&gt; in a modern JavaScript codebase is pretty rare. And the toolchains are aware of this context, so you get warnings and errors when you use it by accident. ESLint does this, for example. Tool builders in the JavaScript community are aware of the language&amp;rsquo;s peculiarities, and newcomers to JavaScript are supported by the tools, to avoid pitfalls. It isn&amp;rsquo;t a matter of shooing away the problem and expecting developers to just learn the quirks – it&amp;rsquo;s a matter of the tooling helping guide developers to best practices.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s as though the tooling community looked at JavaScript and – in a very non-judgemental way – said &amp;ldquo;isn&amp;rsquo;t that interesting?&amp;rdquo; There&amp;rsquo;s no attachment to the way things should be, there&amp;rsquo;s no lamenting about how things could have been better. Things are just&amp;hellip; interesting. After understanding that context, without judging it, tool builders get to work.&lt;/p&gt;

&lt;h2 id="the-community"&gt;The Community&lt;/h2&gt;

&lt;p&gt;So tooling. JavaScript developers contribute back to their own tooling in a way that (and I can &lt;em&gt;only&lt;/em&gt; speak from my experience) iOS developers don&amp;rsquo;t. I&amp;rsquo;m not judging in any way, I&amp;rsquo;m just observing. As much as iOS developers can – &lt;a href="https://www.youtube.com/watch?v=flSMEw_Hxik"&gt;and should&lt;/a&gt; – fix their own problems and improve their own tools, we don&amp;rsquo;t tend to.&lt;/p&gt;

&lt;p&gt;A big part of that is that the tools iOS developers use are &lt;a href="http://isxcodeopensourceyet.github.io"&gt;closed source&lt;/a&gt;, so they can&amp;rsquo;t &lt;em&gt;be&lt;/em&gt; contributed to. But there are plenty of other tools – like &lt;a href="https://github.com/realm/jazzy"&gt;Jazzy&lt;/a&gt;, &lt;a href="https://github.com/CocoaPods/CocoaPods"&gt;CocoaPods&lt;/a&gt;, and &lt;a href="https://github.com/krzysztofzablocki/Sourcery"&gt;Sourcery&lt;/a&gt; – that &lt;em&gt;are&lt;/em&gt; open source and they don&amp;rsquo;t enjoy the same level of community contributions as tools in the JavaScript world. iOS developers happily contribute to libraries and frameworks they use to write code, but they contribute to &lt;em&gt;tools&lt;/em&gt; less frequently.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an argument to be made that because most of the tools that JavaScript developers use are written &lt;em&gt;in&lt;/em&gt; JavaScript, that developers tend to contribute back more. I&amp;rsquo;m not really going to make the argument because it makes a bunch of assumptions around developer motivation. And I&amp;rsquo;m not trying to judge the iOS developer community – I&amp;rsquo;m only saying that the JavaScript community is engaged in participatory tool-building in a way that the iOS community is not. I find it genuinely fascinating.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what tool building in the JavaScript world can look like in practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook builds a &lt;a href="https://github.com/graphql/graphql-js"&gt;GraphQL server in Node.js&lt;/a&gt; and open sources it. The community helps improve it.&lt;/li&gt;
&lt;li&gt;Facebook also builds &lt;a href="https://github.com/graphql/graphiql"&gt;GraphiQL&lt;/a&gt;, a small, in-browser IDE for debugging GraphQL queries on your server. The community helps here, too; the IDE has over sixty contributors.&lt;/li&gt;
&lt;li&gt;Someone embeds GraphiQL &lt;a href="https://github.com/skevy/graphiql-app"&gt;into an Electron app&lt;/a&gt;, which can be pointed to &lt;em&gt;any&lt;/em&gt; GraphQL server. You can use GraphiQL to explore another developer&amp;rsquo;s API, cool!&lt;/li&gt;
&lt;li&gt;Someone else embeds GraphiQL into a &lt;a href="https://www.graphql.college/practice-graphql/"&gt;JSON-to-GraphQL playground generator&lt;/a&gt;. It&amp;rsquo;s a small-but-important part of a larger educational app to teach people about GraphQL and it accompanies an open source book about GraphQL.&lt;/li&gt;
&lt;li&gt;Someone else further remixes GraphiQL into &lt;a href="https://github.com/graphcool/graphql-playground"&gt;GraphQL Playground&lt;/a&gt;, a more powerful and feature-rich IDE than GraphQL alone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a small example of how tools built and released into the OSS community proliferate and are composed into other, even more powerful tools. Here is a case where Facebook, a large company that makes developer tools, builds something. Then they release it and developers remix that thing for their own needs, helping the entire community in the process.&lt;/p&gt;

&lt;p&gt;Tool building in JavaScript operates in an entirely different way than in iOS. Than in any community I&amp;rsquo;ve been a part of, actually. To be absolutely clear: this isn&amp;rsquo;t a complaint against the iOS developer community; this is a strong endorsement of the JavaScript developer community.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;People who enjoy hating JavaScript tend to point to oddities in the language or quirks of its syntax/inheritance model. That kind of stuff. They&amp;rsquo;ll say things like &amp;ldquo;well JavaScript was broken from the beginning&amp;rdquo; or point to the (very funny, I laugh every time!) &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;Wat&lt;/a&gt; video. Those arguments can sound convincing, especially if you&amp;rsquo;ve never really worked in a production JavaScript environment.&lt;/p&gt;

&lt;p&gt;But here&amp;rsquo;s the thing: every language is weird. And every language makes regrettable design choices early on that it has to reckon with. How and when these mistakes are dealt with is a part of the language, too. Just because you disagree with the decisions doesn&amp;rsquo;t make the language &lt;em&gt;bad&lt;/em&gt;. These choices by the language authors are also informed by the community, the environments the language is used in, and the constraints it has to operate under. That&amp;rsquo;s a lot of context, and it&amp;rsquo;s hard for outsiders to have a clear picture of why certain decisions were made.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;iOS developers, myself included, are realizing that modern JavaScript is actually a pretty great language, with a &lt;em&gt;really&lt;/em&gt; nice ecosystem.&lt;/p&gt;&amp;mdash; Ash &amp;ldquo;You Should Write a Blog Post&amp;rdquo; Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/991723030702379009?ref_src=twsrc%5Etfw"&gt;May 2, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tout comprendre c&amp;#39;est tout pardonner&lt;/em&gt;. I understand JavaScript, so I forgive it. And in doing so, I give myself permission to &lt;em&gt;enjoy&lt;/em&gt; it. I hope you give it a shot.&lt;/p&gt;
</description>
      <pubDate>Sat, 05 May 2018 13:53:45 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/javascript-is-good-actually/</guid>
    </item>
    <item>
      <title>Hiring Juniors</title>
      <link>https://ashfurrow.com/blog/hiring-juniors/</link>
      <description>&lt;p&gt;Okay let&amp;rsquo;s dig into this.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I tweeted this earlier this week, to some fanfare and a little pushback:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;sorry, we&amp;rsquo;re looking for someone &lt;br&gt; ○ &lt;br&gt;く|)へ&lt;br&gt; 〉 &lt;br&gt; ￣￣┗┓ with more experience&lt;br&gt; 　 　 ┗┓　 ヾ○ｼ&lt;br&gt; 　　 ┗┓ ヘ/ 　 　 &lt;br&gt; 　 ┗┓ノ &lt;br&gt;　 　 　 　 　 ┗┓&lt;/p&gt;&amp;mdash; Ash Furrow (or is it?) (it is.) (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/988410309319843849?ref_src=twsrc%5Etfw"&gt;April 23, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;I should have expected the pushback; I followed up shortly afterward&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I am reminded of this other time I complained about companies not hiring juniors. Hmm. When will I learn.&lt;a href="https://t.co/I0Z25o4NSM"&gt;https://t.co/I0Z25o4NSM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ash Furrow (or is it?) (it is.) (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/988454390469193728?ref_src=twsrc%5Etfw"&gt;April 23, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;This blog post isn&amp;rsquo;t really about fixing the problem that, at least in New York, it is really really hard to get your first job. Instead, it&amp;rsquo;s a description of my understanding of the problem and how it&amp;rsquo;s evolved.&lt;/p&gt;

&lt;p&gt;So I know a lot of juniors. I&amp;rsquo;ve been running a &lt;a href="https://peerlab.community"&gt;peer lab&lt;/a&gt; for three years and we welcome people from all experience levels, and I help with &lt;a href="https://www.c4q.nyc"&gt;Coalition for Queens&lt;/a&gt;. I know a lot of people who are looking for their first jobs and are having really difficult times. I&amp;rsquo;m close to people, I&amp;rsquo;m close to their pain and frustration. And that pain and frustration was the motivation for my tweet, not any sort of malice towards hiring managers.&lt;/p&gt;

&lt;p&gt;And before we go any further, I have to point out that there is a huge power imbalance between a company trying to hire someone and someone trying to get hired. The company has &lt;em&gt;most&lt;/em&gt; of the power in this relationship. The worst case for the company is that they waste a bit of time interviewing someone and it doesn&amp;rsquo;t work out, and they need to keep looking. Not a huge deal. The worst case for the applicant can be that they don&amp;rsquo;t get the job, so maybe they can&amp;rsquo;t make their rent, maybe they can&amp;rsquo;t feed their family, etc. So from my perspective, I naturally empathize more with the individual than the company.&lt;/p&gt;

&lt;p&gt;This is not to say companies are bad, or have bad intentions. I&amp;rsquo;m only pointing out that one party of this relationship has the power. That imbalance needs to inform any discussion around hiring practices in our industry.&lt;/p&gt;

&lt;p&gt;And not all companies are even in a position to hire juniors. That sucks, but that&amp;rsquo;s the reality of the economic world we live in.&lt;/p&gt;

&lt;p&gt;There are lots of things junior developers can do to distinguish themselves. In the past, I&amp;rsquo;ve told iOS juniors to focus on getting their first app into the App Store, since that shows employers that you are capable of nurturing and building an idea into fully shipped software. But I know lots of juniors who have done this and are struggling. Having an app in the store isn&amp;rsquo;t the distinguisher that it used to be. They need something new, to stand out. I haven&amp;rsquo;t had a satisfying answer, but based on feedback I&amp;rsquo;ve gotten from hiring managers, I think open source contributions might help.&lt;/p&gt;

&lt;p&gt;(Note that not everyone looking for their first job is even capable of making open source contributions. We all have different lives, and contributing to open source is just intrinsically easier for some groups of people. So &amp;ldquo;make some OSS contributions&amp;rdquo; isn&amp;rsquo;t a comprehensive solution to this very broad problem.)&lt;/p&gt;

&lt;p&gt;Making open source contributions shows employers that you&amp;rsquo;re able to contribute to a larger goal through collaborating with other people. That&amp;rsquo;s really important. Building software in a company is never done in isolation; the software always serves the needs of the business, which means you&amp;rsquo;ll be interacting with business people at the very least. Probably designers, product managers, and other engineers, too. OSS contributions confer skills that will be helpful in that sort of collaborative business environment.&lt;/p&gt;

&lt;p&gt;So look at the open source libraries you use. Or at least the one&amp;rsquo;s your heard of. Look at &lt;a href="https://github.com/trending/swift?since=daily"&gt;Trending Repos on GitHub&lt;/a&gt;, see what looks cool, and look for issues labeled &amp;ldquo;good first step&amp;rdquo; or &amp;ldquo;you can do this&amp;rdquo; – lots of projects set aside introductory issues for newcomers, and those should be your goal. Hopefully the project has some setup instructions for contributing, checkout out their contributing guidelines for more info.&lt;/p&gt;

&lt;p&gt;There is also a disconnect between acquiring &lt;em&gt;skills&lt;/em&gt; and acquiring &lt;em&gt;experience&lt;/em&gt;. I don&amp;rsquo;t have a good answer about what balance to strike, but it seems like employers are looking for a mix of both. A lot of juniors I talk to ask me &amp;ldquo;which framework should I learn next?&amp;rdquo; And the answer might be: none of them. If you&amp;rsquo;ve learned a few frameworks on iOS – UIKit, CoreLocation, MapKit – maybe it&amp;rsquo;s time to shift from honing skills to acquiring experience. Building your own app and helping out with open source can help, too. &lt;/p&gt;

&lt;p&gt;Part of the problem, I think, is that companies are unwilling to take risks. This is probably my biggest frustration, actually. See, hiring any engineer is a risk, and hiring an engineer without a lot of experience &lt;em&gt;does&lt;/em&gt; increase that risk. Maybe they&amp;rsquo;re overestimating that increase, or maybe they really are just that risk adverse. My point is, it seems like companies would rather hire no one than they would hire someone who they were only 95% sure would be a good fit. I think there is room for short-term contracts to evaluate engineers before hiring them full time, or other ideas like that. And again with business realities, companies are operating as they are meant to in our capitalist society: to avoid risk and maximize returns. I don&amp;rsquo;t like that, but it&amp;rsquo;s the reality we live it. Again, I don&amp;rsquo;t have the answers, I&amp;rsquo;m still wrapping my head around this situation.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking for your first iOS job, take a look at &lt;a href="http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/"&gt;Orta&amp;rsquo;s blog post&lt;/a&gt;. Try to stay positive, stay focused, and be patient. I wish things were better, that our industry was more inclusive, and I&amp;rsquo;m doing what I can to help. If you&amp;rsquo;re in a position to help move the needle on this, even a little bit, I encourage you to help as well.&lt;/p&gt;
</description>
      <pubDate>Sat, 28 Apr 2018 15:35:37 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/hiring-juniors/</guid>
    </item>
    <item>
      <title>Electrodynamics</title>
      <link>https://ashfurrow.com/blog/electrodynamics/</link>
      <description>&lt;p&gt;Okay so I&amp;rsquo;ve got a lot of thoughts on &lt;a href="https://electronjs.org"&gt;Electron&lt;/a&gt; bouncing around my brain and I honestly can&amp;rsquo;t take it anymore. So this post is more for me, as usual.&lt;/p&gt;

&lt;p&gt;Oh and one important thing to note: I&amp;rsquo;m not interested in discussing Electron itself. If you think it sucks, past experience has taught me that I&amp;rsquo;m very unlikely to change your mind. This post is about the discourse surrounding Electron and, more generally, the discourse in the Apple developer community. And I&amp;rsquo;m thinking about this from a big-picture perspective, not specific tweets or people. I don&amp;rsquo;t know if it&amp;rsquo;s getting more experienced, or getting older, or &lt;a href="https://ashfurrow.com/blog/perspective-of-the-polyglot/"&gt;getting outside the iOS ecosystem&lt;/a&gt;, but lately I find myself really bored by &amp;ldquo;specifics.&amp;rdquo; I&amp;rsquo;m much more keen on looking at issues as a whole piece, rather than component parts.&lt;/p&gt;

&lt;p&gt;Okay so let&amp;rsquo;s dig into this.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Some people dislike Electron. They seem to resent it, in fact. Generally, people discussing Electron seem to fall into one of a few camps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They dislike Electron for &lt;em&gt;whatever&lt;/em&gt; reason.&lt;/li&gt;
&lt;li&gt;They think Electron has a place, sometimes, in software development.&lt;/li&gt;
&lt;li&gt;They don&amp;rsquo;t care about Electron and just want everyone to shut up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I obviously fall in the middle ground. I&amp;rsquo;ve never built an Electron app but I understand the technology involved and I appreciate its appeal. If I were building a Mac app for whatever reason, I&amp;rsquo;d look into building it with Electron (I have built Mac apps and have no desire to use AppKit again).&lt;/p&gt;

&lt;p&gt;The people in the third bucket are my favourite. I sympathize with them because I too want everyone to just shut up. But here I am writing a blog post, so.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the people who really dislike Electron that make the most noise. Different folks have their own reasons for disliking it, which is fine. Folks are welcome to their opinions of course. However, I am a bit embarrassed by the fervour with which members of our community are expressing their outright &lt;em&gt;disdain&lt;/em&gt; for Electron.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s tempting for me to refute the arguments with counter examples, but I really want to emphasize that the individual points people have about Electron are &lt;em&gt;not&lt;/em&gt; what I&amp;rsquo;m talking about right now. It&amp;rsquo;s the &lt;em&gt;tone&lt;/em&gt; of the conversation that I find distasteful. People are complaining – loudly – about a technology they&amp;rsquo;ll never use to build apps, as though &lt;em&gt;no one&lt;/em&gt; should use that technology.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Also, let&amp;rsquo;s be kind even when nominally criticizing tech—people invest a lot of themselves in the tools they use every day, and it&amp;rsquo;s a short trip from &amp;ldquo;X is bad&amp;rdquo; to &amp;ldquo;choosing X is bad&amp;rdquo; to &amp;ldquo;people who choose X are bad&amp;rdquo;&lt;/p&gt;&amp;mdash; Nate Cook 🌱 (@nnnnnnnn) &lt;a href="https://twitter.com/nnnnnnnn/status/988974021453676550?ref_src=twsrc%5Etfw"&gt;April 25, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure there are outsiders looking in on the Apple developer community right now. I wonder what they think of how we&amp;rsquo;re behaving.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Instead of yelling at companies, teams, and developers about the choices they made about their own work, why not take a moment and consider how we got here. &lt;br&gt;&lt;br&gt;And why are you so mad about the decisions of other developer teams. What business is it of yours?&lt;/p&gt;&amp;mdash; Jon Maddox (@maddox) &lt;a href="https://twitter.com/maddox/status/988925582665768961?ref_src=twsrc%5Etfw"&gt;April 24, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Finally, a note about Slack. Slack is an Electron app, probably the most popular Electron app. And Slack has bugs. It has memory leaks. But I &lt;a href="https://twitter.com/ashfurrow/status/989100844674158592"&gt;question&lt;/a&gt; the intellectual rigour of those who would infer or imply that Slack&amp;rsquo;s bugs are the result of being built in Electron. I mean, come on. Lots of software has memory problems. Besides, there are Electron apps &lt;em&gt;without&lt;/em&gt; memory issues. &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; is a shining example of an Electron app, a counterexample to anyone who tries to argue that Electron apps are necessarily poor user experiences. Frankly, blaming Electron for Slack&amp;rsquo;s bugs let&amp;rsquo;s Slack off the hook.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m just so very tired of this conversation. Regularly, someone will reignite the discussion. But every time, people miss out on the bigger picture: whether or not you think developers &lt;em&gt;should&lt;/em&gt; use Electron, they &lt;em&gt;are&lt;/em&gt; using it. So ask yourself: why? Put yourself in their shoes, assume positive intent, try to understand what they&amp;rsquo;re thinking, and please please please stay nonjudgemental. A few tips: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t remove their agency – &amp;ldquo;well Electron only makes sense for businesses.&amp;rdquo; That dismisses entire groups of developers who &lt;em&gt;want&lt;/em&gt; to build Electron apps. &lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t dismiss their technical decisions – &amp;ldquo;well they should just learn AppKit.&amp;rdquo; The fact is, they aren&amp;rsquo;t learning AppKit. Asking &amp;ldquo;why not?&amp;rdquo; is a much more interesting question than labelling them as lazy.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be defensive – &amp;ldquo;well if Electron replaces native apps then what will happen to me?&amp;rdquo; That&amp;rsquo;s jumping to a conclusion. No one is arguing that Electron will or should replace native apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Electron is just another tool; the more tools you have, the more types of problems you can solve. I keep reiterating this point because it&amp;rsquo;s so important: software developers of different stripes have more in common than they have differences. We have so much to learn from one another, but we can&amp;rsquo;t if we keep focusing on our differences.&lt;/p&gt;
</description>
      <pubDate>Wed, 25 Apr 2018 17:24:57 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/electrodynamics/</guid>
    </item>
    <item>
      <title>The Spirit of Moya</title>
      <link>https://ashfurrow.com/blog/the-spirit-of-moya/</link>
      <description>&lt;p&gt;When Swift was released in 2014, I created one of the very first open source Swift libraries: &lt;a href="https://github.com/Moya/Moya"&gt;Moya&lt;/a&gt;. Moya became a fairly popular iOS project, driven by a motivated and kind community, and by its central goal: use Swift features to provide compile-time assurances to network requests.&lt;/p&gt;

&lt;p&gt;What a compelling idea! I would say that using computers (compilers, in this case) to automate the difficult and error-prone parts of network calls is the &lt;em&gt;spirit&lt;/em&gt; of Moya.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, Moya has you encapsulate your network calls into an &lt;code&gt;enum&lt;/code&gt;. Each &lt;code&gt;enum&lt;/code&gt; case represents an API call, with associated values used as parameters. The compiler will produce an error if you try to use the API call without the required parameters. Since your &lt;code&gt;enum&lt;/code&gt; has to conform to a specific protocol,the specifics of the network calls (HTTP verb, parameter encoding, path, headers) are centralized in one spot instead of strewn throughout your code.&lt;/p&gt;

&lt;p&gt;Of course, you still need to actually &lt;em&gt;write&lt;/em&gt; the &lt;code&gt;enum&lt;/code&gt;s yourself. Boo. We have &lt;a href="https://github.com/Moya/Moya/issues/73"&gt;long wished for&lt;/a&gt; a way to automate this, most likely through &lt;a href="https://swagger.io"&gt;Swagger&lt;/a&gt;. It never came to fruition, though. In a sense, the &lt;em&gt;practice&lt;/em&gt; of Moya fell short of its &lt;em&gt;spirit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Okay so a few years went by and then this cool new way to query an API came onto the scene: &lt;a href="http://graphql.org"&gt;GraphQL&lt;/a&gt;. Let&amp;rsquo;s take a look why GraphQL is so cool.&lt;/p&gt;

&lt;p&gt;Typical APIs are built on &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt;, which uses HTTP verbs connected to specific URLs to encode state transfer. Creating a user? That would be a &lt;code&gt;POST&lt;/code&gt; to the &lt;code&gt;/api/users&lt;/code&gt; endpoint, for example. REST has its problems, though. In the context of mobile apps, the biggest problem with REST is the number of round trips to the server it can take to render a view. Let&amp;rsquo;s look at an example from the Artsy app.&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/the-spirit-of-moya/artsy.png" alt="A screenshot of the Artsy iOS app" /&gt;&lt;/p&gt;



&lt;p&gt;Okay so let&amp;rsquo;s examine this from an API perspective. The screenshot shows an art auction, a bid registration button, and a list of lots in the auction. So that&amp;rsquo;s three requests so far: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch the sale model.&lt;/li&gt;
&lt;li&gt;Fetch the logged-in user&amp;rsquo;s registration status.&lt;/li&gt;
&lt;li&gt;Fetch the list of lots in the auction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this view became more complex, we have added more network calls. Now, when I&amp;rsquo;m sitting in my fancy New York City office on fancy 5.8GHz wifi, these requests are all really fast. But if someone is on a less-than-great cellular network, they&amp;rsquo;re going to be waiting a long time for those network requests to return. And on top of that, the responses are going to contain a &lt;em&gt;lot&lt;/em&gt; of information that our view just isn&amp;rsquo;t going to render.&lt;/p&gt;

&lt;p&gt;So we have a lot of roundtrips and a lot of unnecessary data transfer.&lt;/p&gt;

&lt;p&gt;GraphQL solves both of these problems. It provides a way to coalesce many network calls into &lt;em&gt;one&lt;/em&gt; single request and also lets the client specify exactly what information it needs back. Let&amp;rsquo;s take a look at what that request could look like for the view above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"some-sale-id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="nx"&gt;end_at&lt;/span&gt;
    &lt;span class="cm"&gt;/* etc */&lt;/span&gt;
    &lt;span class="nx"&gt;sale_artworks&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;lot_number&lt;/span&gt;
      &lt;span class="nx"&gt;artwork&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;
        &lt;span class="cm"&gt;/* etc */&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="cm"&gt;/* etc */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sale_registrations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"some-sale-id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;is_registered&lt;/span&gt;
      &lt;span class="nx"&gt;bidder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;qualified_for_bidding&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cool! And because the GraphQL server supplies a schema of available fields and queries, we get some really nice tooling on top of this. Here&amp;rsquo;s what it looks like when I hit Artsy&amp;rsquo;s GraphQL server (&lt;a href="https://github.com/artsy/metaphysics"&gt;which is open source&lt;/a&gt;) with that query in a GraphQL IDE called &lt;a href="https://github.com/graphql/graphiql"&gt;GraphiQL&lt;/a&gt;:&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/the-spirit-of-moya/graphiql.png" alt="A screenshot of an Artsy GraphQL request" /&gt;&lt;/p&gt;



&lt;p&gt;Wow! Autocomplete for our network requests. Errors when a request doesn&amp;rsquo;t adhere to the schema. Inline documentation. Types! This is really great!&lt;/p&gt;

&lt;p&gt;So fine, GraphQL is awesome, but what does this have to do with Moya?&lt;/p&gt;

&lt;p&gt;Recall that we wanted Moya to automate the work of creating those &lt;code&gt;enum&lt;/code&gt;s. Because a GraphQL server&amp;rsquo;s schema is accessible programmatically, we can built all kinds of tooling around it. And that leads us to &lt;a href="https://facebook.github.io/relay/"&gt;Relay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Relay is what sold me on React Native development. It was that revolutionary of an idea. And Relay shares its spirit with Moya: to automate the difficult and error-prone parts of network calls. Relay asks view components in a React/Native app to provide &lt;em&gt;fragments&lt;/em&gt; of data that it needs. Each component on the screen tells Relay what data it needs from the GraphQL schema in order to render itself. Relay coalesces these fragments at runtime into a single GraphQL query, requesting &lt;em&gt;only&lt;/em&gt; the data that the component needs, and aggressively caching everything. It is this mobile app developer&amp;rsquo;s dream come true.&lt;/p&gt;

&lt;p&gt;I could go on and on about Relay, about how the Relay compiler integrates well with React, about how it can use TypeScript to provide type safety based off the GraphQL schema, about how it abstracts away concepts like pagination and sorting. It&amp;rsquo;s just so exciting! But the truth is, I&amp;rsquo;m still just getting started with this stuff. I&amp;rsquo;m thrilled to be in the position where I can work with such cool technologies, and I hope to bring the best ideas back from JavaScript into the native iOS world.&lt;/p&gt;

&lt;p&gt;But most of all, I feel so validated in my work on Moya. It was a pretty neat idea, but it&amp;rsquo;s grown into a popular library and vibrant community. Relay has reaffirmed my &lt;a href="https://ashfurrow.com/blog/coding-interview-take-home-challenges/"&gt;belief&lt;/a&gt; that we programmers share more in common than we have differences. Moya and Relay (and others, like &lt;a href="https://www.apollographql.com"&gt;Apollo&lt;/a&gt;!) all approach the problem differently, and I want to celebrate what makes each different while acknowledging what makes them the same.&lt;/p&gt;
</description>
      <pubDate>Sat, 21 Apr 2018 14:38:49 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/the-spirit-of-moya/</guid>
    </item>
  </channel>
</rss>
