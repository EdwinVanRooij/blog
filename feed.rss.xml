<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://ashfurrow.com/feed.rss.xml" rel="self" type="application/rss+xml"/>
    <title>Ash Furrow</title>
    <description>Learning and teaching about interesting topics in iOS Development. Sometimes I diverge to talk about design, photography, or what-have-you.</description>
    <link>https://ashfurrow.com/</link>
    <item>
      <title>A Year of Mastodon User Activity</title>
      <link>https://ashfurrow.com/blog/a-year-of-mastodon-user-activity/</link>
      <description>&lt;p&gt;Oh hey, remember &lt;a href="https://joinmastodon.org"&gt;Mastodon&lt;/a&gt;? Remember how I &lt;a href="https://ashfurrow.com/blog/mastodon/"&gt;started my own Mastodon instance&lt;/a&gt;? How&amp;rsquo;s that been going, anyway? Well it&amp;rsquo;s been (over) a year so let&amp;rsquo;s check in, shall we?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Things have been going well on my instance, &lt;a href="https://mastodon.technology"&gt;mastodon.technology&lt;/a&gt;. I&amp;rsquo;ve learned a tonne, I&amp;rsquo;ve contributed here and there, and I&amp;rsquo;ve gotten to know some of the other instance admins (they rock!). I&amp;rsquo;m more of a lurker on Mastodon than on Twitter, but it&amp;rsquo;s been nice.&lt;/p&gt;

&lt;p&gt;Okay on to the good stuff. Mastodon added the feature of keeping track of user counts over time, but I&amp;rsquo;ve been logging in to the Rails console since I started to check how many users have logged in within one- and two-week timeframes. Not a perfect metric, but it&amp;rsquo;s interesting nonetheless. The account metrics are based on &lt;a href="https://github.com/plataformatec/devise"&gt;devise&lt;/a&gt; and I collected stats with the following two commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'last_sign_in_at &amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'last_sign_in_at &amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;weeks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the data is &lt;a href="https://gist.github.com/ashfurrow/1954350316c180affa879ac3e74caba9"&gt;available in plaintext&lt;/a&gt;, but here&amp;rsquo;s a pretty graph:&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/a-year-of-mastodon-user-activity/graph.png" alt="Graph of Mastodon login counts over a year" /&gt;&lt;/p&gt;



&lt;p&gt;So that&amp;rsquo;s cool! Let&amp;rsquo;s contextualize things a bit. The spike in April came in light of the Cambridge Analytica and Facebook controversy. People were angry about Facebook and surveillance capitalism, and they took to Mastodon for an alternative social network. Cool! I was curious to see if that surge of popularity would last, and it &lt;em&gt;seems&lt;/em&gt; to have, so far anyway.&lt;/p&gt;

&lt;p&gt;The Fediverse was also recently hit my a wave of spam accounts, which &lt;em&gt;could&lt;/em&gt; be inflating login counts slightly, but it&amp;rsquo;s hard to say.&lt;/p&gt;

&lt;p&gt;All in all, I&amp;rsquo;m pretty happy with things. Aside from the &lt;a href="https://github.com/tootsuite/mastodon/issues/6734"&gt;occasional problem&lt;/a&gt; or &lt;a href="https://gist.github.com/ashfurrow/abd1418399883b2bdfdd9a1f6120f139"&gt;misconfigured database backups&lt;/a&gt;, running a Mastodon instance hasn&amp;rsquo;t been particularly onerous. This is good, since I have a life and a job and running mastodon.technology can&amp;rsquo;t be like a full-time commitment for me. Having the hosting costs &lt;a href="https://www.patreon.com/ashfurrow"&gt;covered by donations&lt;/a&gt; also helps &lt;em&gt;a lot&lt;/em&gt;, since it removes the financial burden from me. Of course, there are occasional moderation duties, but for the most part users on my instance have adhered to the &lt;a href="https://mastodon.technology/about/more"&gt;Code of Conduct&lt;/a&gt;. A healthy admin support network helps, too.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not all roses. Some instance have been lost in the past year, some intentionally, some accidentally. But we&amp;rsquo;re all figuring this out together and I&amp;rsquo;ve learned a lot running this service over the past year. Hopefully I can follow this post up in 2019 with updated stats.&lt;/p&gt;
</description>
      <pubDate>Sat, 09 Jun 2018 14:50:30 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/a-year-of-mastodon-user-activity/</guid>
    </item>
    <item>
      <title>Abstraction Ad Nauseam</title>
      <link>https://ashfurrow.com/blog/abstraction-ad-nauseam/</link>
      <description>&lt;p&gt;Okay so tell me if you&amp;rsquo;ve heard &lt;em&gt;this&lt;/em&gt; before:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t use X abstraction, you need to understand/use/think in terms of Y technology that X sits on top of.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Okay so that&amp;rsquo;s pretty vague, right? So let&amp;rsquo;s see some examples that help illustrate how widely used this kind of thinking is.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;You shouldn&amp;rsquo;t use open source libraries because you really should know how every line of code in your app works.&lt;/p&gt;

&lt;p&gt;No one should learn ActiveRecord before learning SQL and understanding relational algebra.&lt;/p&gt;

&lt;p&gt;Manual memory management is the only way to get really memory-efficient code. Garbage collectors and static automation just makes coders lazy.&lt;/p&gt;

&lt;p&gt;Babel is fine and everything, but if you don&amp;rsquo;t understand the actual JavaScript that gets run in the browser, then you&amp;rsquo;re not really a web developer.&lt;/p&gt;

&lt;p&gt;React Native is fine and everything, but if you want to write great apps, then you need to write them in native code.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;(And let&amp;rsquo;s keep in mind that I&amp;rsquo;m not trying to dismiss these individual concerns, which are valid perspectives that people do hold. I mean, I kind of agree with them a little bit – or at least I see where they&amp;rsquo;re coming from.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not dismissing these ideas; I&amp;rsquo;m trying to say that &lt;em&gt;in aggregate&lt;/em&gt;, there&amp;rsquo;s a kind of pattern and &lt;em&gt;that&amp;rsquo;s&lt;/em&gt; what I&amp;rsquo;m  talking about. There&amp;rsquo;s a perspective that&amp;rsquo;s shared among these attitudes, and that perspective is: &amp;ldquo;&lt;strong&gt;other people should work at the level of abstraction that &lt;em&gt;I&lt;/em&gt; want to work in&lt;/strong&gt;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Okay, take a deep breath in. And out. Nice, let&amp;rsquo;s talking about Math.&lt;/p&gt;

&lt;h2 id="theres-always-someone-lower-stack-than-you"&gt;There&amp;rsquo;s Always Someone Lower-Stack Than You&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s why this line of thinking makes no logical sense even though we all have these kinds of thoughts. Let&amp;rsquo;s look at an example: sure someone might enjoy working at abstraction level Y and think others ought to work there to, but there&amp;rsquo;s someone thinking &amp;ldquo;hey, Y is actually built on top of Z.&amp;rdquo; And then there are probably discussions about whether Y is even an appropriate abstraction or if Z is better. My god, it just never ends!&lt;/p&gt;

&lt;p&gt;Or does it?&lt;/p&gt;

&lt;p&gt;It does actually end! It ends with &lt;a href="https://en.wikipedia.org/wiki/Zermelo–Fraenkel_set_theory"&gt;ZF Set Theory&lt;/a&gt;, the axioms of Mathematics from which every field in technology ultimately derive. These are &lt;em&gt;very&lt;/em&gt; abstract concepts, even though all higher levels of abstraction derive from them. Neat.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing under ZF Set Theory except for&amp;hellip; philosophy I guess? I mean, these are &lt;em&gt;the&lt;/em&gt; most foundational building blocks of something as foundational as &lt;em&gt;Math&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see a very broad-strokes example, skipping over many many intermediate levels of abstraction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code in compiled languages are built on top of assembly code.&lt;/li&gt;
&lt;li&gt;Assembly is built on top of zeroes and ones encoded in logic gates.&lt;/li&gt;
&lt;li&gt;Gates are etched into silicon using engineering and physics.&lt;/li&gt;
&lt;li&gt;Physics is built on top of Algebra.&lt;/li&gt;
&lt;li&gt;Algebra is built on top of ZF Set Theory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can do this with basically everything: start with a field of technology, pick one of its foundations, repeat, and you&amp;rsquo;ll eventually end up at the same place. So cool! &lt;/p&gt;

&lt;p&gt;Wait&amp;hellip; I guess &lt;em&gt;technically&lt;/em&gt; there&amp;rsquo;s not &amp;ldquo;always&amp;rdquo; someone lower-stack than you if your field is philosophy. Damn, the Arts majors were right all along! It&amp;rsquo;s the contemplation of the &lt;em&gt;self&lt;/em&gt;, not the contemplation of &lt;code&gt;self&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Okay so we&amp;rsquo;ve established that there&amp;rsquo;s (almost) always someone lower-level than you, and their perspectives &lt;em&gt;also&lt;/em&gt; make sense, we can kind of zoom in and see how this is true in both broad strokes and true in specific instances. It&amp;rsquo;s the idea that people &lt;em&gt;should&lt;/em&gt; work in &lt;em&gt;your&lt;/em&gt; preferred level of abstraction, wherever that preference falls along a spectrum of levels of abstraction. Whatever level you prefer, there&amp;rsquo;s something lower-stack, and inductively, each perspective along this spectrum is arguable and makes sense to &lt;em&gt;someone&lt;/em&gt;. So you have to admit that the chances that &lt;em&gt;any given perspective&lt;/em&gt; along this entire spectrum is somehow preferential to the rest is highly unlikely, right? Right???&lt;/p&gt;

&lt;p&gt;So what, is this another one of my grand-equivocating &amp;ldquo;we&amp;rsquo;re all the same so we should respect and learn from each other blah blah blah&amp;rdquo; blog posts? Well, yeah, it is, but it&amp;rsquo;s more specific than that this time.&lt;/p&gt;

&lt;p&gt;Why does anything that I just said matter? It&amp;rsquo;s because&amp;hellip;&lt;/p&gt;

&lt;h2 id="abstractions-are-really-useful"&gt;Abstractions Are Really Useful&lt;/h2&gt;

&lt;p&gt;Okay so we&amp;rsquo;ve got abstractions which, as concepts, are derived from other, lower abstractions. An abstraction is really a perspective, a way to think about something. Abstractions are really useful because they help us think about things; different kinds of problems lend themselves to being solved using certain perspectives. It would be silly to think about the quantum physics of the electrons being pushed through your CPU if the problem you&amp;rsquo;re trying to solve is &amp;ldquo;I need a website for my band.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Abstractions are really useful, and when we build software, we actually switch between abstractions a lot. Sometimes it&amp;rsquo;s helpful to think about view controllers, sometimes it&amp;rsquo;s helpful to think in terms of specific lines of code within them.&lt;/p&gt;

&lt;p&gt;I guess what this attitude I&amp;rsquo;m describing comes down to is a disagreement about which abstraction levels are &amp;ldquo;better&amp;rdquo;, which is a question that&amp;rsquo;s also reducible to Philosophy. Damn you again, Arts students!&lt;/p&gt;

&lt;p&gt;So abstractions are useful, and we all jump between levels of abstraction all the time, and maybe we &lt;em&gt;should&lt;/em&gt; be curious about what our abstractions are built on, and &lt;em&gt;yeah okay I guess&lt;/em&gt; we should accept that some people are going to want to work at higher levels of abstraction.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s not just when we&amp;rsquo;re working; it&amp;rsquo;s when we&amp;rsquo;re &lt;em&gt;learning&lt;/em&gt;, too. Take for example the argument that Rails developers should learn SQL before using ActiveRecord. Learning useful applications of a tool is usually easier than learning its building blocks, and &amp;ldquo;usefulness&amp;rdquo; is strong motivation to keep learning. You can always come back later and learn more. Often, programming leads back to subjects we originally skimmed over anyway – you&amp;rsquo;ll hit some limitation or bug that requires SQL instead of ActiveRecord and you fill in the gaps of your understanding when you need to.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the blog post. People have different perspectives and they&amp;rsquo;re valid and also different abstractions are useful so learn a bunch, but don&amp;rsquo;t worry about it too much and definitely don&amp;rsquo;t feel obligated when someone tells you &amp;ldquo;well actually, &lt;em&gt;real&lt;/em&gt; programmers program in &lt;em&gt;my favourite thing&lt;/em&gt;.&amp;rdquo; &lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try to go easy on complaining when other people like different abstraction levels than the ones we like. And when we disagree with someone about something technical, we can save a lot of back-and-forth by asking ourselves &amp;ldquo;are we talking in the same abstraction level?&amp;rdquo; &lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll figure this out, we all will. Just remember: expertise is only just informed opinion (and a little ZF Set Theory, I guess).&lt;/p&gt;
</description>
      <pubDate>Tue, 22 May 2018 01:31:50 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/abstraction-ad-nauseam/</guid>
    </item>
    <item>
      <title>Freedom Interview</title>
      <link>https://ashfurrow.com/blog/freedom-interview/</link>
      <description>&lt;p&gt;I was was &lt;a href="https://freedom.to/blog/ios-developer-ash-furrow-on-fighting-distraction-and-forgetting-fomo/"&gt;interviewed on the Freedom blog&lt;/a&gt; about fighting distraction and fear-of-missing-out. Check it out!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Freedom is an app I used that blocks websites like Twitter, Facebook, YouTube, etc by redirecting network requests to those sites to localhost, which essentially makes them unreachable. I use it in the morning to help me stay focused on getting out the door, and I&amp;rsquo;ve noticed that good mornings are correlated with good days. Freedom is a good treatment for &lt;a href="https://www.esquire.com/news-politics/a19505007/internet-broken-brain/"&gt;Internet Broken Brain Syndrome&lt;/a&gt;, so check it out if you too are Extremely Online.&lt;/p&gt;
</description>
      <pubDate>Thu, 10 May 2018 14:55:04 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/freedom-interview/</guid>
    </item>
    <item>
      <title>All I Can Say is I'm Excited</title>
      <link>https://ashfurrow.com/blog/all-i-can-say-is-im-excited/</link>
      <description>&lt;p&gt;So it&amp;rsquo;s been a few months since I&amp;rsquo;ve &lt;a href="https://ashfurrow.com/blog/mood-improvements/"&gt;last blogged about my mood improvements&lt;/a&gt; and I wanted to check in, because a lot has happened since then.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To catch you up, I have completed my round of cognitive behavioural therapy (CBT) and am feeling great! My mood is consistent throughout the day, and usually hovers around &amp;ldquo;happy, excited.&amp;rdquo; I even have a graph for you to prove it, which I&amp;rsquo;m still a bit awestruck by (&lt;a href="https://gist.github.com/ashfurrow/406dfa25fa8aeba43abea5e52a81f2e8"&gt;plaintext data available&lt;/a&gt;).&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/all-i-can-say-is-im-excited/graph.png" alt="Graph of my mood" /&gt;&lt;/p&gt;



&lt;p&gt;So what does this mean? Well, you can see things got better after starting CBT. The graph doesn&amp;rsquo;t go back very far in time since I started keeping track of my mood shortly before starting CBT. But I was consistently feeling &amp;ldquo;down, worried&amp;rdquo;, &amp;ldquo;sad, unhappy&amp;rdquo;, or &amp;ldquo;miserable, nervous&amp;rdquo; (that last one indicates suicidal ideation, which you can see from the graph hasn&amp;rsquo;t occurred since February).&lt;/p&gt;

&lt;p&gt;Even though mostly I feel &amp;ldquo;happy, excited&amp;rdquo;, I still dip down. I mean, everyone feels sad or anxious sometimes. The difference now is that I have skills to deal with those feelings. I have learned to separate my thoughts from my reaction &lt;em&gt;to&lt;/em&gt; those thoughts, which is a key part of CBT.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t begin to tell you how different this feels. Because like, I&amp;rsquo;ve &lt;em&gt;been&lt;/em&gt; here before. I&amp;rsquo;ve felt better, I&amp;rsquo;ve &lt;a href="https://ashfurrow.com/blog/therapys-end/"&gt;blogged about ending therapy&lt;/a&gt;, I&amp;rsquo;ve felt good. But it never really lasted. This&amp;hellip; feels different. I think, for all the medications I&amp;rsquo;ve tried (and all the terrible side effects), all it took was a handful of CBT sessions.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;My favourite musician, John K Samson, also suffers from depression. He wrote a song about someone with mental illness – well, it&amp;rsquo;s more of a poem set to music. It tells the story of someone who struggles with delusional thinking, which isn&amp;rsquo;t depression, but it influences their mood, too. It&amp;rsquo;s haunting.&lt;/p&gt;



&lt;iframe src="https://open.spotify.com/embed/track/7jI7kdXqAgDpCq6Y6anYqc" width="100%" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"&gt;&lt;/iframe&gt;



&lt;p&gt;The nice thing about this song is that it&amp;rsquo;s immediately followed on the record by what Samson calls &amp;ldquo;a happy ending, of sorts.&amp;rdquo; It&amp;rsquo;s not a resolution – the character still has delusions – but they find happiness.&lt;/p&gt;



&lt;iframe src="https://open.spotify.com/embed/track/3GAoGRa1CilOHMQWb239Bm" width="100%" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"&gt;&lt;/iframe&gt;
  



&lt;p&gt;This song really resonated with me. Because the fact is, mental illnesses don&amp;rsquo;t really &lt;em&gt;have&lt;/em&gt; resolutions. Like, you can feel better, but it&amp;rsquo;s not like a stomach flu or something that you fully recover from. It sticks with you, and it&amp;rsquo;s going to stick with me, too. But you can live with it, which is what this character in the songs does. And it&amp;rsquo;s what I&amp;rsquo;m going to do.&lt;/p&gt;

&lt;p&gt;All I can say is I&amp;rsquo;m excited.&lt;/p&gt;
</description>
      <pubDate>Wed, 09 May 2018 18:31:59 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/all-i-can-say-is-im-excited/</guid>
    </item>
    <item>
      <title>JavaScript is Good, Actually</title>
      <link>https://ashfurrow.com/blog/javascript-is-good-actually/</link>
      <description>&lt;p&gt;The subtext of many discussions around building software in Electron and React/Native involve this assumption that &lt;em&gt;JavaScript is bad&lt;/em&gt;. There is a kind of unspoken understanding that JavaScript developers are &lt;em&gt;stuck&lt;/em&gt; writing it, that either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;given the choice, they would move to a &amp;ldquo;better&amp;rdquo; language, or&lt;/li&gt;
&lt;li&gt;they have a kind of Stockholm syndrome and like JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s not true. This framing discounts a tonne of developers – thousands and thousands of us – that &lt;em&gt;enjoy&lt;/em&gt; writing JavaScript. Not because it just happens to be popular or that we are forced to, either. Language like this robs JavaScript developers of our agency, treating us/our decisions/our preferences as invalid or even accidental.&lt;/p&gt;

&lt;p&gt;The fact is, we enjoy writing JavaScript because JavaScript is a good language. I&amp;rsquo;ll explain later.&lt;/p&gt;

&lt;p&gt;Oh wait, I&amp;rsquo;ll explain now.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="the-syntax"&gt;The Syntax&lt;/h2&gt;

&lt;p&gt;JavaScript syntax is a joy to use. It&amp;rsquo;s clear, concise, and tailored to the kinds of tasks that JavaScript developers tend to write code for. Here is an example, &lt;a href="https://github.com/artsy/emission/blob/365d34cba3bf96c74c6ae7f2615f37c82c669920/src/lib/Components/Consignments/Screens/Overview.tsx#L135-L150"&gt;taken from Artsy&amp;rsquo;s React Native app&lt;/a&gt;:&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;submitFinalSubmission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showConfirmationScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ConsignmentSetup&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasSubmittedSuccessfully&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;updateSubmission&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;submission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"SUBMITTED"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submission_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consignmentsStateKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submissionDraftSubmitted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Overview final submission: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;hasSubmittedSuccessfully&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hasSubmittedSuccessfully&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;rsquo;ve never worked with modern JavaScript before, it might look a little weird. But I would bet that you understand the &lt;em&gt;gist&lt;/em&gt; of what this code is and does. And that&amp;rsquo;s pretty important, I think.&lt;/p&gt;

&lt;p&gt;I really like modern JavaScript syntax. Check out the &lt;a href="https://github.com/DrkSephy/es6-cheatsheet"&gt;ES6 Cheatsheet&lt;/a&gt; for a bunch of examples of how modern syntax makes JavaScript really nice to code in. Here is another great article describing &lt;a href="https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70"&gt;modern syntax&lt;/a&gt;, aimed at folks more familiar with older JavaScript. &lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going into more detail because syntax is&amp;hellip; well it&amp;rsquo;s not &lt;em&gt;that&lt;/em&gt; important to a language. Syntax is (I&amp;rsquo;m waving my hand dismissively here) just syntax. What matters more is the context in which syntax is used. Modern JavaScript syntax is very effective and suited to the kinds of problems that JavaScript developers solve. Don&amp;rsquo;t even get me started on how cool &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt; is.&lt;/p&gt;

&lt;p&gt;You may have noticed that the code above isn&amp;rsquo;t even JavaScript, it&amp;rsquo;s &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;, which brings me to my next point.&lt;/p&gt;

&lt;h2 id="the-toolchains"&gt;The Toolchains&lt;/h2&gt;

&lt;p&gt;Okay so one of the key parts of why JavaScript is great is the toolchains that surround it. Tools like TypeScript and &lt;a href="https://flow.org"&gt;Flow&lt;/a&gt; bring type safety to the language. Editors like &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; bring IDE-level features like autocomplete, inline documentation, an extension API, and more. Tools like &lt;a href="https://prettier.io"&gt;Prettier&lt;/a&gt;, &lt;a href="https://eslint.org"&gt;ESLint&lt;/a&gt;, and &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt; exist to make writing code easier and faster.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really difficult for me to describe just how foundational a paradigm shift I experienced when I began writing in JavaScript. My entire perspective on how code should be written changed. So it&amp;rsquo;s hard to describe in words how effective and how powerful these toolchains are. So let&amp;rsquo;s take a look at one small example.&lt;/p&gt;

&lt;p&gt;One argument against JavaScript that exemplifies how developers who are unfamiliar with JavaScript complain about problems that are obviated by toolchains is the &lt;code&gt;==&lt;/code&gt; operator. Ah yes, the humble equality check. Because of early design choices – I&amp;rsquo;d call them mistakes but I don&amp;rsquo;t have the full context – equality in JavaScript is a bit bizarre. &lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Isn’t this diagram from that one Nicolas Cage movie where he’s a JS developer looking for a lost treasure? &lt;a href="https://t.co/oK7NETXW5A"&gt;pic.twitter.com/oK7NETXW5A&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Patterson (@tenderlove) &lt;a href="https://twitter.com/tenderlove/status/992755305426685952?ref_src=twsrc%5Etfw"&gt;May 5, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(Note: Aaron is really really funny and you should give him a follow. He&amp;rsquo;s not the kind of developer to make facile complaints against JavaScript, I really enjoyed his tweet.)&lt;/p&gt;

&lt;p&gt;Since JavaScript is used all over the internet, you can&amp;rsquo;t really just &lt;em&gt;change&lt;/em&gt; the semantics around equality without breaking everything. JavaScript has harder constraints around backwards compatibility than many other popular languages; constraints like this are as much an opportunity as they are a liability. To wit: JavaScript introduced &lt;code&gt;===&lt;/code&gt; to solve this problem, which is just &lt;code&gt;==&lt;/code&gt; but it works as you expect. &lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;==&lt;/code&gt; in a modern JavaScript codebase is pretty rare. And the toolchains are aware of this context, so you get warnings and errors when you use it by accident. ESLint does this, for example. Tool builders in the JavaScript community are aware of the language&amp;rsquo;s peculiarities, and newcomers to JavaScript are supported by the tools, to avoid pitfalls. It isn&amp;rsquo;t a matter of shooing away the problem and expecting developers to just learn the quirks – it&amp;rsquo;s a matter of the tooling helping guide developers to best practices.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s as though the tooling community looked at JavaScript and – in a very non-judgemental way – said &amp;ldquo;isn&amp;rsquo;t that interesting?&amp;rdquo; There&amp;rsquo;s no attachment to the way things should be, there&amp;rsquo;s no lamenting about how things could have been better. Things are just&amp;hellip; interesting. After understanding that context, without judging it, tool builders get to work.&lt;/p&gt;

&lt;h2 id="the-community"&gt;The Community&lt;/h2&gt;

&lt;p&gt;So tooling. JavaScript developers contribute back to their own tooling in a way that (and I can &lt;em&gt;only&lt;/em&gt; speak from my experience) iOS developers don&amp;rsquo;t. I&amp;rsquo;m not judging in any way, I&amp;rsquo;m just observing. As much as iOS developers can – &lt;a href="https://www.youtube.com/watch?v=flSMEw_Hxik"&gt;and should&lt;/a&gt; – fix their own problems and improve their own tools, we don&amp;rsquo;t tend to.&lt;/p&gt;

&lt;p&gt;A big part of that is that the tools iOS developers use are &lt;a href="http://isxcodeopensourceyet.github.io"&gt;closed source&lt;/a&gt;, so they can&amp;rsquo;t &lt;em&gt;be&lt;/em&gt; contributed to. But there are plenty of other tools – like &lt;a href="https://github.com/realm/jazzy"&gt;Jazzy&lt;/a&gt;, &lt;a href="https://github.com/CocoaPods/CocoaPods"&gt;CocoaPods&lt;/a&gt;, and &lt;a href="https://github.com/krzysztofzablocki/Sourcery"&gt;Sourcery&lt;/a&gt; – that &lt;em&gt;are&lt;/em&gt; open source and they don&amp;rsquo;t enjoy the same level of community contributions as tools in the JavaScript world. iOS developers happily contribute to libraries and frameworks they use to write code, but they contribute to &lt;em&gt;tools&lt;/em&gt; less frequently.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an argument to be made that because most of the tools that JavaScript developers use are written &lt;em&gt;in&lt;/em&gt; JavaScript, that developers tend to contribute back more. I&amp;rsquo;m not really going to make the argument because it makes a bunch of assumptions around developer motivation. And I&amp;rsquo;m not trying to judge the iOS developer community – I&amp;rsquo;m only saying that the JavaScript community is engaged in participatory tool-building in a way that the iOS community is not. I find it genuinely fascinating.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what tool building in the JavaScript world can look like in practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook builds a &lt;a href="https://github.com/graphql/graphql-js"&gt;GraphQL server in Node.js&lt;/a&gt; and open sources it. The community helps improve it.&lt;/li&gt;
&lt;li&gt;Facebook also builds &lt;a href="https://github.com/graphql/graphiql"&gt;GraphiQL&lt;/a&gt;, a small, in-browser IDE for debugging GraphQL queries on your server. The community helps here, too; the IDE has over sixty contributors.&lt;/li&gt;
&lt;li&gt;Someone embeds GraphiQL &lt;a href="https://github.com/skevy/graphiql-app"&gt;into an Electron app&lt;/a&gt;, which can be pointed to &lt;em&gt;any&lt;/em&gt; GraphQL server. You can use GraphiQL to explore another developer&amp;rsquo;s API, cool!&lt;/li&gt;
&lt;li&gt;Someone else embeds GraphiQL into a &lt;a href="https://www.graphql.college/practice-graphql/"&gt;JSON-to-GraphQL playground generator&lt;/a&gt;. It&amp;rsquo;s a small-but-important part of a larger educational app to teach people about GraphQL and it accompanies an open source book about GraphQL.&lt;/li&gt;
&lt;li&gt;Someone else further remixes GraphiQL into &lt;a href="https://github.com/graphcool/graphql-playground"&gt;GraphQL Playground&lt;/a&gt;, a more powerful and feature-rich IDE than GraphiQL alone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a small example of how tools built and released into the OSS community proliferate and are composed into other, even more powerful tools. Here is a case where Facebook, a large company that makes developer tools, builds something. Then they release it and developers remix that thing for their own needs, helping the entire community in the process.&lt;/p&gt;

&lt;p&gt;Tool building in JavaScript operates in an entirely different way than in iOS. Than in any community I&amp;rsquo;ve been a part of, actually. To be absolutely clear: this isn&amp;rsquo;t a complaint against the iOS developer community; this is a strong endorsement of the JavaScript developer community.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;People who enjoy hating JavaScript tend to point to oddities in the language or quirks of its syntax/inheritance model. That kind of stuff. They&amp;rsquo;ll say things like &amp;ldquo;well JavaScript was broken from the beginning&amp;rdquo; or point to the (very funny, I laugh every time!) &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;Wat&lt;/a&gt; video. Those arguments can sound convincing, especially if you&amp;rsquo;ve never really worked in a production JavaScript environment.&lt;/p&gt;

&lt;p&gt;But here&amp;rsquo;s the thing: every language is weird. And every language makes regrettable design choices early on that it has to reckon with. How and when these mistakes are dealt with is a part of the language, too. Just because you disagree with the decisions doesn&amp;rsquo;t make the language &lt;em&gt;bad&lt;/em&gt;. These choices by the language authors are also informed by the community, the environments the language is used in, and the constraints it has to operate under. That&amp;rsquo;s a lot of context, and it&amp;rsquo;s hard for outsiders to have a clear picture of why certain decisions were made.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;iOS developers, myself included, are realizing that modern JavaScript is actually a pretty great language, with a &lt;em&gt;really&lt;/em&gt; nice ecosystem.&lt;/p&gt;&amp;mdash; Ash &amp;ldquo;You Should Write a Blog Post&amp;rdquo; Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/991723030702379009?ref_src=twsrc%5Etfw"&gt;May 2, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tout comprendre c&amp;#39;est tout pardonner&lt;/em&gt;. I understand JavaScript, so I forgive it. And in doing so, I give myself permission to &lt;em&gt;enjoy&lt;/em&gt; it. I hope you give it a shot.&lt;/p&gt;
</description>
      <pubDate>Sat, 05 May 2018 13:53:45 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/javascript-is-good-actually/</guid>
    </item>
    <item>
      <title>Hiring Juniors</title>
      <link>https://ashfurrow.com/blog/hiring-juniors/</link>
      <description>&lt;p&gt;Okay let&amp;rsquo;s dig into this.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I tweeted this earlier this week, to some fanfare and a little pushback:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;sorry, we&amp;rsquo;re looking for someone &lt;br&gt; ○ &lt;br&gt;く|)へ&lt;br&gt; 〉 &lt;br&gt; ￣￣┗┓ with more experience&lt;br&gt; 　 　 ┗┓　 ヾ○ｼ&lt;br&gt; 　　 ┗┓ ヘ/ 　 　 &lt;br&gt; 　 ┗┓ノ &lt;br&gt;　 　 　 　 　 ┗┓&lt;/p&gt;&amp;mdash; Ash Furrow (or is it?) (it is.) (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/988410309319843849?ref_src=twsrc%5Etfw"&gt;April 23, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;I should have expected the pushback; I followed up shortly afterward&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I am reminded of this other time I complained about companies not hiring juniors. Hmm. When will I learn.&lt;a href="https://t.co/I0Z25o4NSM"&gt;https://t.co/I0Z25o4NSM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ash Furrow (or is it?) (it is.) (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/988454390469193728?ref_src=twsrc%5Etfw"&gt;April 23, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;This blog post isn&amp;rsquo;t really about fixing the problem that, at least in New York, it is really really hard to get your first job. Instead, it&amp;rsquo;s a description of my understanding of the problem and how it&amp;rsquo;s evolved.&lt;/p&gt;

&lt;p&gt;So I know a lot of juniors. I&amp;rsquo;ve been running a &lt;a href="https://peerlab.community"&gt;peer lab&lt;/a&gt; for three years and we welcome people from all experience levels, and I help with &lt;a href="https://www.c4q.nyc"&gt;Coalition for Queens&lt;/a&gt;. I know a lot of people who are looking for their first jobs and are having really difficult times. I&amp;rsquo;m close to people, I&amp;rsquo;m close to their pain and frustration. And that pain and frustration was the motivation for my tweet, not any sort of malice towards hiring managers.&lt;/p&gt;

&lt;p&gt;And before we go any further, I have to point out that there is a huge power imbalance between a company trying to hire someone and someone trying to get hired. The company has &lt;em&gt;most&lt;/em&gt; of the power in this relationship. The worst case for the company is that they waste a bit of time interviewing someone and it doesn&amp;rsquo;t work out, and they need to keep looking. Not a huge deal. The worst case for the applicant can be that they don&amp;rsquo;t get the job, so maybe they can&amp;rsquo;t make their rent, maybe they can&amp;rsquo;t feed their family, etc. So from my perspective, I naturally empathize more with the individual than the company.&lt;/p&gt;

&lt;p&gt;This is not to say companies are bad, or have bad intentions. I&amp;rsquo;m only pointing out that one party of this relationship has the power. That imbalance needs to inform any discussion around hiring practices in our industry.&lt;/p&gt;

&lt;p&gt;And not all companies are even in a position to hire juniors. That sucks, but that&amp;rsquo;s the reality of the economic world we live in.&lt;/p&gt;

&lt;p&gt;There are lots of things junior developers can do to distinguish themselves. In the past, I&amp;rsquo;ve told iOS juniors to focus on getting their first app into the App Store, since that shows employers that you are capable of nurturing and building an idea into fully shipped software. But I know lots of juniors who have done this and are struggling. Having an app in the store isn&amp;rsquo;t the distinguisher that it used to be. They need something new, to stand out. I haven&amp;rsquo;t had a satisfying answer, but based on feedback I&amp;rsquo;ve gotten from hiring managers, I think open source contributions might help.&lt;/p&gt;

&lt;p&gt;(Note that not everyone looking for their first job is even capable of making open source contributions. We all have different lives, and contributing to open source is just intrinsically easier for some groups of people. So &amp;ldquo;make some OSS contributions&amp;rdquo; isn&amp;rsquo;t a comprehensive solution to this very broad problem.)&lt;/p&gt;

&lt;p&gt;Making open source contributions shows employers that you&amp;rsquo;re able to contribute to a larger goal through collaborating with other people. That&amp;rsquo;s really important. Building software in a company is never done in isolation; the software always serves the needs of the business, which means you&amp;rsquo;ll be interacting with business people at the very least. Probably designers, product managers, and other engineers, too. OSS contributions confer skills that will be helpful in that sort of collaborative business environment.&lt;/p&gt;

&lt;p&gt;So look at the open source libraries you use. Or at least the one&amp;rsquo;s your heard of. Look at &lt;a href="https://github.com/trending/swift?since=daily"&gt;Trending Repos on GitHub&lt;/a&gt;, see what looks cool, and look for issues labeled &amp;ldquo;good first step&amp;rdquo; or &amp;ldquo;you can do this&amp;rdquo; – lots of projects set aside introductory issues for newcomers, and those should be your goal. Hopefully the project has some setup instructions for contributing, checkout out their contributing guidelines for more info.&lt;/p&gt;

&lt;p&gt;There is also a disconnect between acquiring &lt;em&gt;skills&lt;/em&gt; and acquiring &lt;em&gt;experience&lt;/em&gt;. I don&amp;rsquo;t have a good answer about what balance to strike, but it seems like employers are looking for a mix of both. A lot of juniors I talk to ask me &amp;ldquo;which framework should I learn next?&amp;rdquo; And the answer might be: none of them. If you&amp;rsquo;ve learned a few frameworks on iOS – UIKit, CoreLocation, MapKit – maybe it&amp;rsquo;s time to shift from honing skills to acquiring experience. Building your own app and helping out with open source can help, too. &lt;/p&gt;

&lt;p&gt;Part of the problem, I think, is that companies are unwilling to take risks. This is probably my biggest frustration, actually. See, hiring any engineer is a risk, and hiring an engineer without a lot of experience &lt;em&gt;does&lt;/em&gt; increase that risk. Maybe they&amp;rsquo;re overestimating that increase, or maybe they really are just that risk adverse. My point is, it seems like companies would rather hire no one than they would hire someone who they were only 95% sure would be a good fit. I think there is room for short-term contracts to evaluate engineers before hiring them full time, or other ideas like that. And again with business realities, companies are operating as they are meant to in our capitalist society: to avoid risk and maximize returns. I don&amp;rsquo;t like that, but it&amp;rsquo;s the reality we live it. Again, I don&amp;rsquo;t have the answers, I&amp;rsquo;m still wrapping my head around this situation.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking for your first iOS job, take a look at &lt;a href="http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/"&gt;Orta&amp;rsquo;s blog post&lt;/a&gt;. Try to stay positive, stay focused, and be patient. I wish things were better, that our industry was more inclusive, and I&amp;rsquo;m doing what I can to help. If you&amp;rsquo;re in a position to help move the needle on this, even a little bit, I encourage you to help as well.&lt;/p&gt;
</description>
      <pubDate>Sat, 28 Apr 2018 15:35:37 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/hiring-juniors/</guid>
    </item>
  </channel>
</rss>
